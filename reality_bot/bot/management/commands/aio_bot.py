import asyncio
import logging
import operator
import os
import re
from code.answer_messages import message_texts
from code.db_worker import DB_Worker
from code.states import (ApartmentSearch, ArchiveObjects, Buyer,
                         CallbackOnStart, CeoRegistration, DeleteBuyer,
                         DeleteCallbackStates, HouseCallbackStates,
                         HouseSearch, LandCallbackStates, LandSearch,
                         ObjForBuyer, PriceEditCallbackStates, Registration,
                         RoomCallbackStates, RoomSearch,
                         TownHouseCallbackStates, TownHouseSearch,
                         WorkersBuyers, WorkersObjects)
from code.utils import (Output, checked_apartment_category, keyboards,
                        object_city_microregions_for_checking,
                        object_country_microregions_for_checking,
                        object_microregions)
from functools import reduce

import django
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import (CallbackQuery, ContentType, InputFile, MediaGroup,
                           Message)
from bot.models import Apartment, Archive
from bot.models import Buyer as BuyerDB
from bot.models import (Ceo, CodeWord, House, Individuals, Land, Rieltors,
                        Room, Subscriptors, TownHouse)
from decouple import config
from django.core.management.base import BaseCommand
from django.db.models import Q

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rest.settings')
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

DB_NAME = config('DB_NAME')
POSTGRES_USER = config('POSTGRES_USER')
POSTGRES_PASSWORD = config('POSTGRES_PASSWORD')
DB_HOST = config('DB_HOST')
DB_PORT = config('DB_PORT')
TELEGRAM_CHANNEL_ID = config('TELEGRAM_CHANNEL_ID')

bot = Bot(token=config('TELEGRAM_TOKEN'))

dp = Dispatcher(bot, storage=MemoryStorage())


class Command(BaseCommand):
    def handle(self, *args, **options):
        executor.start_polling(dp, skip_updates=True)
# -----------------------------------------------------------------------------
# --------------------—Å—Ç–∞—Ä—Ç----------------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['start'])
async def start(message: Message):
    await message.answer(message_texts.on.get('start'), parse_mode='Markdown')
# -----------------------------------------------------------------------------
# --------------------–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø----------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['registration'])
async def entering_name(message: Message, state: FSMContext):
    if message.from_user.username is None:
        await message.answer(
            '–£ –≤–∞—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).'
            + ' –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ telegram –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ.'
            + ' –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É üëâ /registration'
        )
        await state.finish()
    else:
        if Rieltors.objects.filter(user_id=message.from_user.id).exists():
            await message.answer(
                '‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ'
            )
            await state.finish()
        else:
            await message.answer(
                '‚úè –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! *–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?*\n'
                + '*–ù–∞–ø–∏—à–∏.* –ü–æ–¥–æ–π–¥—ë—Ç –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: –ò–º—è, –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ, –ò–º—è –§–∞–º–∏–ª–∏—è\n\n'
                + 'üôÖ‚Äç‚ôÇÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await Registration.step1.set()


@dp.message_handler(state=Registration.step1)
async def agency_choice(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(
            user_id=message.from_user.id,
            rieltor_name=message.text,
            username=message.from_user.username
        )
        await message.answer(
            '–í –∫–∞–∫–æ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?',
            reply_markup=keyboards.agency_choice_kb()
        )
        await Registration.step2.set()


@dp.callback_query_handler(state=Registration.step2)
async def phone_number_entering(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(agency_name=callback.data)

        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text_for_editing'),
            parse_mode='Markdown'
        )
        await Registration.step3.set()


@dp.message_handler(state=Registration.step3)
async def registration_finish(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:

        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(phone_number='+7' + message.text[1:])
            data = await state.get_data()
            if not DB_Worker.rieltor_to_db(data):
                await message.answer(
                    message_texts.on.get('sorry_about_error')
                )
            else:
                rieltor = Rieltors.objects.get(user_id=message.from_user.id)
                await bot.send_sticker(
                    chat_id=message.from_user.id,
                    sticker="CAACAgIAAxkBAAEHTKhjxjrcni0OCgaOirMYTAeiEYMy1AACPR4AAg5kyEnoLgEu8rg2Oy0E"
                )
                await message.answer(
                    f'OK, {rieltor.name}, –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å '
                    + '—Ä–∞–±–æ—Ç—É —Å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"'
                )

                ceo = Ceo.objects.filter(agency_name=rieltor.agency_name)
                if ceo.exists():
                    for item in ceo:
                        await bot.send_message(
                            chat_id=item.user_id,
                            text='üå± *–ö –≤–∞–º –¥–æ–±–∞–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:*\n'
                            + f'username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: *@{message.from_user.username}*,\n'
                            + f'–∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: *{message.from_user.first_name}*,\n'
                            + f'–∏–º—è –≤ —Å–∏—Å—Ç–µ–º–µ: *{rieltor.name}*,\n'
                            + f'–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: *{rieltor.phone_number}*',
                            parse_mode='Markdown'
                        )
            await state.finish()
        else:
            await message.answer(
                message_texts.phone_number_entering_error(
                    phone_number=message.text
                ),
                parse_mode='Markdown'
            )
            logging.error(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}.'
            )
            await Registration.step3.set()
# -----------------------------------------------------------------------------
# --------------------About----------------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['about'])
async def about(message: Message):
    await message.answer(
        '\n'.join(message_texts.on.get('about')),
        parse_mode='markdown'
    )
# -----------------------------------------------------------------------------
# --------------------------–°–¢–ê–¢–ò–°–¢–ò–ö–ê-----------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['getstatistics'])
async def get_statistics(message: Message):
    await message.answer(message_texts.on.get('statistics'))
# -----------------------------------------------------------------------------
# -----------------------–ü–û–ò–°–ö –û–ë–™–ï–ö–¢–ê-----------------------------------------
# -----------------------------------------------------------------------------


"""
–†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∏–∂–Ω—é—é —É–¥–∞–ª–∏—Ç—å
–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —á–∞—Å—Ç–Ω—ã—Ö —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤
"""
# @dp.message_handler(commands=['searchobjects'])
# async def search_objects(message: Message):
#     """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã"""

#     individuals = [int(', '.join(
#         user
#     )) for user in Individuals.objects.all().values_list('user_id')]
#     print(individuals)
#     if message.from_id in individuals:
#         await message.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ '
#               + '–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –±–æ—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @davletelvir')
#     else:
#         await message.answer(
#             '‚úè –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤:\n'
#             + '*–ö–∞—Å–∫–∞–¥–Ω–∞—è* - –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤—ã–≤–∞–ª–∏–≤–∞—é—Ç—Å—è –≤ —á–∞—Ç, *—Å —Ñ–æ—Ç–æ*.\n'
#             + '*–ö–∞—Ä—É—Å–µ–ª—å* - –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ, –Ω–æ *–±–µ–∑ —Ñ–æ—Ç–æ*.',
#             reply_markup=keyboards.carousel_or_cascade_keyboard(),
#             parse_mode='Markdown'
#         )

# !!!–ó–∞–∫–æ–º–µ–Ω—å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
# üëáüëáüëáüëáüëá


@dp.message_handler(commands=['searchobjects'])
async def search_objects(message: Message):
    DB_Worker.command_counting()
    # await code.send_photo(
    #     chat_id=message.chat.id,
    #     photo=photo,
    #     caption='‚úè –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤:\n'
    #             + '*–ö–∞—Å–∫–∞–¥–Ω–∞—è* - –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã "–≤—ã–≤–∞–ª–∏–≤–∞—é—Ç—Å—è" –≤ —á–∞—Ç, *—Å —Ñ–æ—Ç–æ*.\n'
    #             + '*–ö–∞—Ä—É—Å–µ–ª—å* - –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ, –Ω–æ *–±–µ–∑ —Ñ–æ—Ç–æ*.',
    #             reply_markup=keyboards.carousel_or_cascade_keyboard(),
    #             parse_mode='Markdown'
    #     )
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        await message.answer(
            '‚úè –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤:\n'
            + '*–ö–∞—Å–∫–∞–¥–Ω–∞—è* - –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã "–≤—ã–≤–∞–ª–∏–≤–∞—é—Ç—Å—è" –≤ —á–∞—Ç, *—Å —Ñ–æ—Ç–æ*.\n'
            + '*–ö–∞—Ä—É—Å–µ–ª—å* - –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ, –Ω–æ *–±–µ–∑ —Ñ–æ—Ç–æ*.',
            reply_markup=keyboards.carousel_or_cascade_keyboard(),
            parse_mode='Markdown'
        )


@dp.callback_query_handler(text=['cascade', 'carousel'])
async def cascade(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –≤ –∫–∞—Å–∫–∞–¥–Ω–æ–π —Ñ–æ—Ä–º–µ"""
    await state.reset_data()
    await state.update_data(view_form=callback.data)
    await callback.message.answer(
        '‚úè –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
        reply_markup=keyboards.get_category_keyboard()
    )


"""
–†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∏–∂–Ω—é—é —É–¥–∞–ª–∏—Ç—å
—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
"""
# @dp.message_handler(commands=['addobject'])
# async def add_object(message: Message):
#     """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""

#     subscriptors = [int(', '.join(
#         user
#     )) for user in Subscriptors.objects.all().values_list('user_id')]

#     if message.from_id not in subscriptors:
#         await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ'
#       + ' –ø–æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –±–æ—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @davletelvir')
#     else:
#         await message.answer(
#                 '‚úè –ß—Ç–æ –∂–µ–ª–∞–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?',
#                 reply_markup=keyboards.add_category_keyboard()
#             )

# !!!–ó–∞–∫–æ–º–µ–Ω—å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
# üëáüëáüëáüëáüëá
# -----------------------------------------------------------------------------
# --------------------–î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê----------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['addobject'])
async def add_object(message: Message):
    DB_Worker.command_counting()

    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        await message.answer(
                '‚úè –ß—Ç–æ –∂–µ–ª–∞–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?',
                reply_markup=keyboards.add_category_keyboard()
            )
# -----------------------------------------------------------------------------
# --------------------–ü–û–ò–°–ö –û–ë–™–ï–ö–¢–ê--------------------------------------------
# -----------------------------------------------------------------------------


@dp.callback_query_handler(text='–ö–æ–º–Ω–∞—Ç—ã')
async def rooms_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚úè –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã?')
    await RoomSearch.step2.set()


@dp.message_handler(state=RoomSearch.step2)
async def rooms(message: Message, state: FSMContext):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    –ü–ê–ì–ò–ù–ê–¶–ò–Æ –∫–æ–º–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–∂–µ–≤–∞–ª –≤ —É—á–∞—Å—Ç–∫–∞—Ö –Ω–∏–∂–µ –µ—Å–ª–∏ —á–æ
    """
    try:
        query_set = Room.objects.filter(
            price__lte=int(message.text)
        ).order_by('-pub_date')
        pages_count = query_set.count()
        data = await state.get_data()

        if query_set.exists():
            await state.finish()
            await message.answer(
                f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–∫–æ–º–Ω–∞—Ç–∞–º* ({pages_count}):',
                parse_mode='Markdown'
            )

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–æ–º"""
            if data.get('view_form') == 'cascade':

                for item in query_set:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.room_search_result_text(item=item),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await message.answer_media_group(media=album)

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª—å—é"""
            if data.get('view_form') == 'carousel':
                if query_set:
                    page = 1
                    await message.answer(
                        message_texts.room_search_result_text(
                            item=query_set[page - 1]
                        ),
                        reply_markup=keyboards.pagination_keyboard(
                            page=page,
                            pages=pages_count,
                            category='room'
                        ),
                        parse_mode='Markdown'
                    )
                    await state.update_data(
                        page=page,
                        pages_count=pages_count,
                        query_set=query_set
                    )
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()

    except (ValueError) as e:
        await bot.send_sticker(
            chat_id=message.from_user.id,
            sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
        )
        await message.answer(
            message_texts.on.get('limit_entering_error'),
            parse_mode='Markdown'
        )
        logging.error(f'{e}')
        await RoomSearch.step2.set()


@dp.callback_query_handler(text=['room_prev', 'room_next'])
async def rooms_next(callback: CallbackQuery, state: FSMContext):
    """–ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    try:
        data = await state.get_data()
        if callback.data == 'room_prev':
            page = data.get('page') - 1
        elif callback.data == 'room_next':
            page = data.get('page') + 1

        if (page > 0) and (page <= data.get('pages_count')):
            await state.update_data(page=page)
            await callback.message.edit_text(
                message_texts.room_search_result_text(
                    item=data.get('query_set')[page - 1]
                ),
                reply_markup=keyboards.pagination_keyboard(
                    page=page,
                    pages=data.get('pages_count'),
                    category='room'
                ),
                parse_mode='Markdown'
            )
    except IndexError:
        pass
    except ValueError:
        pass


@dp.callback_query_handler(text='–î–æ–º–∞')
async def houses_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚úè –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã?')
    await HouseSearch.step2.set()


@dp.message_handler(state=HouseSearch.step2)
async def houses(message: Message, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–∞–º"""
    try:
        query_set = House.objects.filter(
            price__lte=int(message.text)
        ).order_by('-pub_date')
        pages_count = query_set.count()
        data = await state.get_data()

        if query_set.exists():
            await state.finish()
            await message.answer(
                f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *–¥–æ–º–∞–º* ({pages_count}):',
                parse_mode='Markdown'
            )

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–æ–º"""
            if data.get('view_form') == 'cascade':
                for item in query_set:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.house_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await message.answer_media_group(media=album)

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª—å"""
            if data.get('view_form') == 'carousel':
                if query_set:
                    page = 1
                    await message.answer(
                        message_texts.house_search_result_text(
                            item=query_set[page - 1]
                        ),
                        reply_markup=keyboards.pagination_keyboard(
                            page=page,
                            pages=pages_count,
                            category='house'
                        ),
                        parse_mode='Markdown'
                    )
                    await state.update_data(
                        page=page,
                        pages_count=pages_count,
                        query_set=query_set
                    )
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()

    except (ValueError) as e:
        await bot.send_sticker(
            chat_id=message.from_user.id,
            sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
        )
        await message.answer(
            message_texts.on.get('limit_entering_error'),
            parse_mode='Markdown'
        )
        logging.error(f'{e}')
        await HouseSearch.step2.set()


@dp.callback_query_handler(text=['house_prev', 'house_next'])
async def houses_next(callback: CallbackQuery, state: FSMContext):
    """–ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    # –ú–ê–ì–ò–Ø!
    try:
        data = await state.get_data()
        if callback.data == 'house_prev':
            page = data.get('page') - 1
        elif callback.data == 'house_next':
            page = data.get('page') + 1

        if (page > 0) and (page <= data.get('pages_count')):
            await state.update_data(page=page)
            await callback.message.edit_text(
                message_texts.house_search_result_text(
                    item=data.get('query_set')[page - 1]
                ),
                reply_markup=keyboards.pagination_keyboard(
                    page=page,
                    pages=data.get('pages_count'),
                    category='house'
                ),
                parse_mode='Markdown'
            )
    except IndexError:
        pass
    except ValueError:
        pass


@dp.callback_query_handler(text='–¢–∞—É–Ω—Ö–∞—É—Å—ã')
async def townhouses_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚úè –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã?')
    await TownHouseSearch.step2.set()


@dp.message_handler(state=TownHouseSearch.step2)
async def townhouses(message: Message, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞—É–Ω—Ö–∞—É—Å–∞–º –ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    try:
        query_set = TownHouse.objects.filter(
            price__lte=int(message.text)
        ).order_by('-pub_date')
        pages_count = query_set.count()
        data = await state.get_data()

        if query_set.exists():
            await state.finish()
            await message.answer(
                f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—Ç–∞—É–Ω—Ö–∞—É—Å–∞–º* ({pages_count}):',
                parse_mode='Markdown'
            )

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–æ–º"""
            if data.get('view_form') == 'cascade':
                for item in query_set:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.townhouse_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await message.answer_media_group(media=album)

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª—å—é"""
            if data.get('view_form') == 'carousel':
                if query_set:
                    page = 1
                    await message.answer(
                        message_texts.townhouse_search_result_text(
                            item=query_set[page - 1]
                        ),
                        reply_markup=keyboards.pagination_keyboard(
                            page=page,
                            pages=pages_count,
                            category='townhouse'
                        ),
                        parse_mode='Markdown'
                    )
                    await state.update_data(
                        page=page,
                        pages_count=pages_count,
                        query_set=query_set
                    )
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()

    except (ValueError) as e:
        await bot.send_sticker(
            chat_id=message.from_user.id,
            sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
        )
        await message.answer(
            message_texts.on.get('limit_entering_error'),
            parse_mode='Markdown'
        )
        logging.error(f'{e}')
        await TownHouseSearch.step2.set()


@dp.callback_query_handler(text=['townhouse_prev', 'townhouse_next'])
async def townhouses_next(callback: CallbackQuery, state: FSMContext):
    """–ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    try:
        data = await state.get_data()
        if callback.data == 'townhouse_prev':
            page = data.get('page') - 1
        elif callback.data == 'townhouse_next':
            page = data.get('page') + 1

        if (page > 0) and (page <= data.get('pages_count')):
            await state.update_data(page=page)
            await callback.message.edit_text(
                message_texts.townhouse_search_result_text(
                    data.get('query_set')[page - 1]
                ),
                reply_markup=keyboards.pagination_keyboard(
                    page, data.get('pages_count'), 'townhouse'
                ),
                parse_mode='Markdown'
            )
    except IndexError:
        pass
    except ValueError:
        pass


@dp.callback_query_handler(text='–£—á–∞—Å—Ç–∫–∏')
async def lands_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('‚úè –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã?')
    await LandSearch.step2.set()


@dp.message_handler(state=LandSearch.step2)
async def lands(message: Message, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫–∞–º –ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    try:
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ—ã (–∫–≤–µ—Ä–∏—Å–µ—Ç) –Ω–∞ –≤—ã–≤–æ–¥
        query_set = Land.objects.filter(
            price__lte=int(message.text)
        ).order_by('-pub_date')
        pages_count = query_set.count()
        data = await state.get_data()

        # –¥–µ–∂—É—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞
        if query_set.exists():
            await state.finish()
            await message.answer(
                f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *—É—á–∞—Å—Ç–∫–∞–º* ({pages_count}):',
                parse_mode='Markdown'
            )

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–æ–º"""
            if data.get('view_form') == 'cascade':
                for item in query_set:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.lands_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await message.answer_media_group(media=album)

            """–≤–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª—å—é"""
            if data.get('view_form') == 'carousel':
                if query_set:
                    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –ø–µ—Ä–≤—É—é
                    page = 1
                    await message.answer(
                        # –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–Ω—Ñ—ã –æ–± –æ–±—ä–µ–∫—Ç–µ) –∫–≤–µ—Ä–∏—Å–µ—Ç–∞
                        message_texts.lands_search_result_text(
                            item=query_set[page - 1]
                        ),
                        reply_markup=keyboards.pagination_keyboard(
                            page=page,
                            pages=pages_count,
                            category='land'
                        ),
                        parse_mode='Markdown'
                    )
                    await state.update_data(
                        # –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ FSM –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
                        # –≤–æ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –º–∞–≥–∏–∏
                        page=page,
                        pages_count=pages_count,
                        query_set=query_set
                    )
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()

    except (ValueError) as e:
        await bot.send_sticker(
            chat_id=message.from_user.id,
            sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
        )
        await message.answer(
            message_texts.on.get('limit_entering_error'),
            parse_mode='Markdown'
        )
        logging.error(f'{e}')
        await LandSearch.step2.set()


@dp.callback_query_handler(text=['land_prev', 'land_next'])
async def lands_next(callback: CallbackQuery, state: FSMContext):
    """–ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    # –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ú–ê–ì–ò–ò!
    try:
        # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        data = await state.get_data()
        if callback.data == 'land_prev':
            page = data.get('page') - 1
        elif callback.data == 'land_next':
            page = data.get('page') + 1

        # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ–±–æ—Ä–∞
        if (page > 0) and (page <= data.get('pages_count')):

            # –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await state.update_data(page=page)

            await callback.message.edit_text(

                # –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥
                message_texts.lands_search_result_text(
                    item=data.get('query_set')[page - 1]
                ),
                # –∫–µ–π–±–æ—Ä–¥ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                reply_markup=keyboards.pagination_keyboard(
                    page=page,
                    pages=data.get('pages_count'),
                    category='land'
                ),
                parse_mode='Markdown'
            )
    # –æ—Ç –≥—Ä–µ—Ö–∞ –ø–æ–¥–∞–ª—å—à–µ, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    except IndexError:
        pass
    except ValueError:
        pass


@dp.callback_query_handler(text="–ö–≤–∞—Ä—Ç–∏—Ä—ã")
async def apartments(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚úè –í—ã–±–µ—Ä–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç',
        reply_markup=keyboards.get_rooms_count_keyboard()
    )


@dp.callback_query_handler(text='‚è™ –ù–∞–∑–∞–¥')
async def back_button_action(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚úè –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞',
        reply_markup=keyboards.get_category_keyboard()
    )

checked_category = {}


@dp.callback_query_handler(
    text=[
        '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ',
        '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ',
        '5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ'
    ]
)
async def apartment_plan_category_choice(
    callback: CallbackQuery,
    state: FSMContext
):
    await state.update_data(room_count=callback.data.removesuffix('-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ'))
    global checked_category
    key = str(callback.from_user.id)
    checked_category.setdefault(key, [])

    await callback.message.edit_text(
        '‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ',
        reply_markup=keyboards.apartment_plan_category_choice(checked_buttons=[])
    )
    checked_category[key] = []

    await ApartmentSearch.step3.set()


@dp.callback_query_handler(
    state=ApartmentSearch.step3,
    text=checked_apartment_category
)
async def apartment_plan_category_checking(
    callback: CallbackQuery,
    state: FSMContext
):
    answer = callback.data
    key = str(callback.from_user.id)
    if answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä':
        if not checked_category[key]:
            await callback.message.edit_text(
                '‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                reply_markup=keyboards.apartment_plan_category_choice(checked_buttons=[])
            )
        else:
            await state.update_data(category=checked_category[key])
            await callback.message.edit_text('‚úè –î–æ –∫–∞–∫–æ–π —Ü–µ–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç—ã?')
            await ApartmentSearch.step4.set()
    else:
        if '‚úÖ' in answer:
            checked_category[key].remove(answer.removeprefix('‚úÖ '))
        else:
            checked_category[key].append(answer)
        await callback.message.edit_text(
            '‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ',
            reply_markup=keyboards.apartment_plan_category_choice(
                checked_buttons=checked_category[key]
            )
        )
        await ApartmentSearch.step3.set()


@dp.message_handler(state=ApartmentSearch.step4)
async def apartment_search_result(
    message: Message,
    state: FSMContext
):
    try:
        data = await state.get_data()
        room_count = data.get('room_count')
        category = data.get('category')
        query = reduce(
            operator.or_, [
                Q(**{'category__contains': field}) for field in category
            ]
        )
        query_set = Apartment.objects.filter(query)
        query_set = query_set.filter(
            room_quantity=int(room_count),
            price__lte=int(message.text)
        ).order_by('-pub_date')

        if query_set:
            await message.answer(
                f'‚ú≥ –í–æ—Ç, —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ *{room_count}-–∫–æ–º–Ω–∞—Ç–Ω—ã–º*:',
                parse_mode='Markdown',
            )
            await state.finish()

            """–í–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–æ–º"""
            if data.get('view_form') == 'cascade':
                for item in query_set:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.apartments_search_result_text(
                                        room_count=room_count,
                                        item=item
                                    ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await message.answer_media_group(media=album)

            if data.get('view_form') == 'carousel':
                """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª—å—é"""
                pages_count = query_set.count()

                if query_set:
                    page = 1
                    await message.answer(
                        message_texts.apartments_search_result_text(
                            int(room_count),
                            query_set[page - 1]
                        ),
                        reply_markup=keyboards.pagination_keyboard(
                            page=page,
                            pages=pages_count,
                            category='apartment'
                        ),
                        parse_mode='Markdown'
                    )
                    await state.update_data(
                        page=page,
                        pages_count=pages_count,
                        query_set=query_set,
                        room_count=room_count
                    )
        else:
            await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()
    except (ValueError) as e:
        await bot.send_sticker(
            chat_id=message.from_user.id,
            sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
        )
        await message.answer(
            message_texts.on.get('limit_entering_error'),
            parse_mode='Markdown'
        )
        logging.error(f'{e}')
        await ApartmentSearch.step4.set()


@dp.callback_query_handler(
    text=['apartment_prev', 'apartment_next']
)
async def apartment_next(callback: CallbackQuery, state: FSMContext):
    """–ü–ê–ì–ò–ù–ê–¶–ò–Ø"""
    try:
        data = await state.get_data()
        if callback.data == 'apartment_prev':
            page = data.get('page') - 1
        elif callback.data == 'apartment_next':
            page = data.get('page') + 1

        if (page > 0) and (page <= data.get('pages_count')):

            await state.update_data(page=page)
            await callback.message.edit_text(
                message_texts.apartments_search_result_text(
                    int(data.get('room_count')),
                    data.get('query_set')[page - 1]
                ),
                reply_markup=keyboards.pagination_keyboard(
                    page=page,
                    pages=data.get('pages_count'),
                    category='apartment'
                ),
                parse_mode='Markdown'
            )
    except IndexError:
        pass
    except ValueError:
        pass

# --------------------------------------------------------------------------
# ------------------- –û–ü–†–û–° –ü–û –ö–í–ê–†–¢–ò–†–ï ------------------------------------
# --------------------------------------------------------------------------


@dp.callback_query_handler(text='–ö–≤–∞—Ä—Ç–∏—Ä—É')
async def add_apartment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.'
        + '\n'
        + '\n‚úè *–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç*',
        reply_markup=keyboards.add_rooms_count_keyboard(),
        parse_mode='Markdown'
    )


@dp.callback_query_handler(text=[
    'add_1_room', 'add_2_room',
    'add_3_room', 'add_4_room',
    'add_5_room'
])
async def entering_room_count(
    callback: CallbackQuery,
    state: FSMContext
):
    await state.update_data(room_count=callback.data[4])
    await callback.message.edit_text(
        '‚úè *–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã*\n\n'
        + '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥ –∏ –ø—Ä–æ–µ–∑–¥–æ–≤ (—É–ª., –ø—Ä., –ø–µ—Ä. –∏ —Ç.–ø.)\n\n'
        + '‚ùó –ü–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π, –ü–æ–±–µ–¥—ã, –Æ–±–∏–ª–µ–π–Ω—ã–π, –ë–µ—Ä—ë–∑–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ\n\n'
        + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
        parse_mode='Markdown'
    )
    await CallbackOnStart.Q1.set()


@dp.message_handler(state=CallbackOnStart.Q1)
async def entering_street_name(
    message: Message,
    state: FSMContext
):
    answer = message.text.title()
    if answer == '–°—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(street_name=answer)

        await message.answer(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ 5, 5–ê –∏–ª–∏ 91 –∫–æ—Ä–ø.1\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q2)
async def entering_house_number(message: Message, state: FSMContext):
    answer = message.text
    if answer == '–°—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if '"' in answer:
            formatting_answer = answer.replace('"', '')
            answer = formatting_answer

        if ' ' in answer:
            formatting_answer = answer.replace(' ', '')
            answer = formatting_answer

        await state.update_data(house_number=answer.upper())
        await message.answer(
            '‚úè –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
            reply_markup=keyboards.floor_number_or_count_keyboard(
                object='apartment_floor'
            )
        )
        await CallbackOnStart.next()


@dp.callback_query_handler(state=CallbackOnStart.Q3, text=[
    '1_afloor', '2_afloor', '3_afloor', '4_afloor',
    '5_afloor', '6_afloor', '7_afloor', '8_afloor',
    '9_afloor', '10_afloor', '11_afloor', '12_afloor',
    '13_afloor', '14_afloor', '15_afloor', '16_afloor',
    '17_afloor', '18_afloor', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
])
async def entering_floor(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(floor=callback.data.removesuffix('_afloor'))
        await callback.message.edit_text(
            '‚úè –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
            reply_markup=keyboards.floor_number_or_count_keyboard(
                object='apartment_house_floors'
            )
        )
        await CallbackOnStart.next()


@dp.callback_query_handler(state=CallbackOnStart.Q4, text=[
    '1_afloors', '2_afloors', '3_afloors', '4_afloors',
    '5_afloors', '6_afloors', '7_afloors', '8_afloors',
    '9_afloors', '10_afloors', '11_afloors', '12_afloors',
    '13_afloors', '14_afloors', '15_afloors', '16_afloors',
    '17_afloors', '18_afloors', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
])
async def entering_floors(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(floors=callback.data.removesuffix('_afloors'))

        await callback.message.edit_text(
            '‚úè *–ù–∞–ø–∏—à–∏ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã*, –∫–∞–∫'
            + ' —É–∫–∞–∑–∞–Ω–æ –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–µ\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await CallbackOnStart.plan_category.set()


@dp.message_handler(state=CallbackOnStart.plan_category)
async def plan_category(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(area=answer)
            await message.answer(
                '‚úè –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞?',
                reply_markup=keyboards.apartment_plan_category()
            )
            await CallbackOnStart.Q5.set()

        except (ValueError) as e:
            await CallbackOnStart.Q4.set()
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.callback_query_handler(state=CallbackOnStart.Q5, text=[
    '–ú–ñ–ö',
    '–°—Ç–∞—Ä–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏',
    '–£–ª—É—á—à–µ–Ω–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏',
    '–ù–æ–≤—ã–µ –¥–æ–º–∞',
    '–ù–æ–≤—ã–µ –¥–æ–º–∞ —Å –∏–Ω–¥.–æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º',
    '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
])
async def entering_area(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(category=callback.data)
        await callback.message.edit_text(
            message_texts.on.get('enter_price'),
            parse_mode='Markdown'
        )
        await CallbackOnStart.Q6.set()


@dp.message_handler(state=CallbackOnStart.Q6)
async def entering_price(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = int(message.text)
            await state.update_data(price=answer)
            await message.answer(
                message_texts.entering_description_text(category='–∫–≤–∞—Ä—Ç–∏—Ä—ã'),
                parse_mode='Markdown'
            )
            await CallbackOnStart.next()

        except (ValueError) as e:
            await CallbackOnStart.Q6.set()
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=CallbackOnStart.Q7)
async def entering_description(message: Message, state: FSMContext):
    answer = message.text
    if answer == '–°—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if len(message.text) <= 200:
            await state.update_data(description=answer)
            await message.answer(
                '‚úè –ù–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
                reply_markup=keyboards.yes_no_keyboard('encumbrance')
            )
            await CallbackOnStart.next()
        else:
            await message.answer(
                message_texts.character_limit(len(message.text))
            )
            logging.error('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞–∫–æ–≤')
            await CallbackOnStart.Q7.set()


@dp.callback_query_handler(
    state=CallbackOnStart.Q8,
    text=['yes_encumbrance', 'no_encumbrance', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_encumbrance(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_encumbrance':
            await state.update_data(encumbrance=True)
        if callback.data == 'no_encumbrance':
            await state.update_data(encumbrance=False)
        await callback.message.edit_text(
            '‚úè –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
            reply_markup=keyboards.yes_no_keyboard('children')
        )
        await CallbackOnStart.next()


@dp.callback_query_handler(
    state=CallbackOnStart.Q9,
    text=['yes_children', 'no_children', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_children(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–µ–π"""
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_children':
            await state.update_data(children=True)
        if callback.data == 'no_children':
            await state.update_data(children=False)
        await callback.message.edit_text(
            '‚úè –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
            reply_markup=keyboards.yes_no_keyboard('mortage')
        )
        await CallbackOnStart.next()


@dp.callback_query_handler(
    state=CallbackOnStart.Q10,
    text=['yes_mortage', 'no_mortage', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_mortage(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –∏–ø–æ—Ç–µ–∫—É"""
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_mortage':
            await state.update_data(mortage=True)
        if callback.data == 'no_mortage':
            await state.update_data(mortage=False)
        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await CallbackOnStart.next()


@dp.message_handler(state=CallbackOnStart.Q11)
async def entering_phone_number(message: Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(owner_phone_number='+7' + message.text[1:])
            await message.answer(
                '‚úè *–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã?*\n\n'
                + '–ï–≥–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n'
                + '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await CallbackOnStart.Q12.set()
        else:
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.phone_number_entering_error(message.text),
                parse_mode='Markdown'
            )
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await CallbackOnStart.Q11.set()


@dp.message_handler(state=CallbackOnStart.Q12)
async def entering_agency_name(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(owner_name=answer)
        await message.answer(
            '‚úè –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n'
        )
        await CallbackOnStart.Q14.set()


images = {}


@dp.message_handler(state=CallbackOnStart.Q14, content_types=ContentType.PHOTO)
async def report_photo(message: Message, state: FSMContext):

    global images
    key = str(message.from_user.id)
    images.setdefault(key, [])

    if len(images[key]) == 0:
        images[key].append(message.photo[-1].file_id)
        await message.answer(message_texts.on.get('code_word_text'))
        await CallbackOnStart.Q15.set()
    else:
        images[key].append(message.photo[-1].file_id)


@dp.message_handler(state=CallbackOnStart.Q15)
async def base_updating(message: Message, state: FSMContext):

    await state.update_data(code_word=message.text)
    user_id = message.from_user.id

    rieltor = Rieltors.objects.get(user_id=user_id)
    photo = images.get(str(user_id))
    images.pop(str(user_id))
    await state.update_data(photo=photo)
    await state.update_data(
        user_id=user_id,
        rieltor_name=rieltor.name,
        agency_name=rieltor.agency_name,
        rieltor_phone_number=rieltor.phone_number
    )
    data = await state.get_data()

    # –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ –ò –≤—ã–¥–∞—á–∞
    await asyncio.sleep(2)
    if not DB_Worker.apartment_to_db(data):
        await message.answer(
            message_texts.on.get('sorry_about_error')
        )
    else:
        album = MediaGroup()
        channel_album = MediaGroup()
        photo_list = data.get('photo')
        for photo_id in photo_list:
            if photo_id == photo_list[-1]:
                # –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.apartment_adding_result_text(data)
                    ),
                    parse_mode='Markdown'
                )
                # –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
                channel_album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.apartment_message_for_channel(data)
                    ),
                    parse_mode='Markdown'
                )
            else:
                album.attach_photo(photo_id)
                channel_album.attach_photo(photo_id)
        await message.answer_media_group(media=album)
        await bot.send_media_group(TELEGRAM_CHANNEL_ID, channel_album)
    await state.finish()


# --------------------------------------------------------------------------
# ------------------- –û–ü–†–û–° –ü–û –ö–û–ú–ù–ê–¢–ï ------------------------------------
# --------------------------------------------------------------------------
@dp.callback_query_handler(text='–ö–æ–º–Ω–∞—Ç—É')
async def add_room(callback: CallbackQuery, state: FSMContext):

    await state.update_data(room_reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.\n\n'
        + '‚úè *–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã*\n\n'
        + '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥ –∏ –ø—Ä–æ–µ–∑–¥–æ–≤ (—É–ª., –ø—Ä., –ø–µ—Ä. –∏ —Ç.–ø.)\n\n'
        + '‚ùó –ü–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π, –ü–æ–±–µ–¥—ã, –Æ–±–∏–ª–µ–π–Ω—ã–π, –ë–µ—Ä—ë–∑–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ\n\n',
        parse_mode='Markdown'

    )
    await RoomCallbackStates.R1.set()


@dp.message_handler(state=RoomCallbackStates.R1)
async def enetering_rooms_street_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(room_street_name=message.text.title())
        await message.answer(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞* –≤ —Ñ–æ—Ä–º–∞—Ç–µ 5, 5–ê –∏–ª–∏ 91 –∫–æ—Ä–ø.1\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R2)
async def enetering_rooms_house_number(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if '"' in answer:
            formatting_answer = answer.replace('"', '')
            answer = formatting_answer

        if ' ' in answer:
            formatting_answer = answer.replace(' ', '')
            answer = formatting_answer

        await state.update_data(room_house_number=answer.upper())
        await message.answer(
            '‚úè –í–≤–µ–¥–∏ —ç—Ç–∞–∂ –∫–æ–º–Ω–∞—Ç—ã',
            reply_markup=keyboards.floor_number_or_count_keyboard('room_floor')
        )
        await RoomCallbackStates.next()


@dp.callback_query_handler(state=RoomCallbackStates.R3, text=[
    '1_rfloor', '2_rfloor', '3_rfloor', '4_rfloor',
    '5_rfloor', '6_rfloor', '7_rfloor', '8_rfloor',
    '9_rfloor', '10_rfloor', '11_rfloor', '12_rfloor',
    '13_rfloor', '14_rfloor', '15_rfloor', '16_rfloor',
    '17_rfloor', '18_rfloor', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
])
async def entering_room_floor(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(room_floor=callback.data.removesuffix('_rfloor'))
        await callback.message.edit_text(
            '‚úè –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π',
            reply_markup=keyboards.floor_number_or_count_keyboard(
                object='room_house_floors'
            )
        )
        await RoomCallbackStates.next()


@dp.callback_query_handler(state=RoomCallbackStates.R4, text=[
    '1_rfloors', '2_rfloors', '3_rfloors', '4_rfloors',
    '5_rfloors', '6_rfloors', '7_rfloors', '8_rfloors',
    '9_rfloors', '10_rfloors', '11_rfloors', '12_rfloors',
    '13_rfloors', '14_rfloors', '15_rfloors', '16_rfloors',
    '17_rfloors', '18_rfloors', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
])
async def entering_room_floors(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(room_floors=callback.data.removesuffix('_rfloors'))
        await callback.message.edit_text(
            '‚úè *–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã*, –∫–∞–∫ –≤ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–µ\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R5)
async def enetering_rooms_area(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text

            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(room_area=answer)
            await message.answer(
                message_texts.on.get('enter_price'),
                parse_mode='Markdown'
            )
            await RoomCallbackStates.next()

        except (ValueError) as e:
            await RoomCallbackStates.R5.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=RoomCallbackStates.R6)
async def entering_room_price(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = int(message.text)
            await state.update_data(room_price=answer)
            await message.answer(
                message_texts.entering_description_text(category='–∫–æ–º–Ω–∞—Ç—ã'),
                parse_mode='Markdown'
            )
            await RoomCallbackStates.next()

        except (ValueError) as e:
            await RoomCallbackStates.R6.set()
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=RoomCallbackStates.R7)
async def entering_room_description(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if len(message.text) <= 200:
            await state.update_data(room_description=answer)
            await message.answer(
                '‚úè –ù–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
                reply_markup=keyboards.yes_no_keyboard(item='room_encumbrance')
                )
            await RoomCallbackStates.next()
        else:
            await message.answer(
                message_texts.character_limit(len(message.text))
            )
            logging.error('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞–∫–æ–≤')
            await RoomCallbackStates.R7.set()


@dp.callback_query_handler(
    state=RoomCallbackStates.R8,
    text=['yes_room_encumbrance', 'no_room_encumbrance', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_room_encumbrance(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_room_encumbrance':
            await state.update_data(room_encumbrance=True)
        if callback.data == 'no_room_encumbrance':
            await state.update_data(room_encumbrance=False)
        await callback.message.edit_text(
            '‚úè –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
            reply_markup=keyboards.yes_no_keyboard(item='room_children')
        )
        await RoomCallbackStates.next()


@dp.callback_query_handler(
    state=RoomCallbackStates.R9,
    text=['yes_room_children', 'no_room_children', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_room_children(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_room_children':
            await state.update_data(room_children=True)
        if callback.data == 'no_room_children':
            await state.update_data(room_children=False)
        await callback.message.edit_text(
            '‚úè –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
            reply_markup=keyboards.yes_no_keyboard(item='room_mortage')
        )
        await RoomCallbackStates.next()


@dp.callback_query_handler(
    state=RoomCallbackStates.R10,
    text=['yes_room_mortage', 'no_room_mortage', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_room_mortage(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_room_mortage':
            await state.update_data(room_mortage=True)
        if callback.data == 'no_room_mortage':
            await state.update_data(room_mortage=False)
        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await RoomCallbackStates.next()


@dp.message_handler(state=RoomCallbackStates.R11)
async def entering_room_phone_number(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(room_owner_phone_number='+7' + message.text[1:])
            await message.answer(
                '‚úè *–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã?*\n\n'
                + '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await RoomCallbackStates.R12.set()
        else:
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.phone_number_entering_error(
                    phone_number=message.text
                ),
                parse_mode='Markdown'
            )
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await RoomCallbackStates.R11.set()


@dp.message_handler(state=RoomCallbackStates.R12)
async def entering_room_agency_name(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(room_owner_name=answer)
        await message.answer(
            '‚úè –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n\n'
        )
        await RoomCallbackStates.R14.set()


@dp.message_handler(state=RoomCallbackStates.R14, content_types=ContentType.PHOTO)
async def report_room_photo(message: Message):
    global images
    key = str(message.from_user.id)
    images.setdefault(key, [])

    if len(images[key]) == 0:
        images[key].append(message.photo[-1].file_id)
        await message.answer(message_texts.on.get('code_word_text'))
        await RoomCallbackStates.R15.set()
    else:
        images[key].append(message.photo[-1].file_id)


@dp.message_handler(state=RoomCallbackStates.R15)
async def room_base_updating(message: Message, state: FSMContext):

    await state.update_data(room_code_word=message.text)
    user_id = message.from_user.id

    rieltor = Rieltors.objects.get(user_id=user_id)
    photo = images.get(str(user_id))
    images.pop(str(user_id))
    await state.update_data(room_photo=photo)
    await state.update_data(
            room_user_id=user_id,
            room_rieltor_name=rieltor.name,
            room_agency_name=rieltor.agency_name,
            room_rieltor_phone_number=rieltor.phone_number
        )

    data = await state.get_data()

    # –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ –ò –≤—ã–¥–∞—á–∞
    await asyncio.sleep(2)
    if not DB_Worker.room_to_db(data):
        await message.answer(
            message_texts.on.get('sorry_about_error')
        )
    else:
        album = MediaGroup()
        channel_album = MediaGroup()
        photo_list = data.get('room_photo')
        for photo_id in photo_list:
            if photo_id == photo_list[-1]:
                album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.room_adding_result_text(data)
                    ),
                    parse_mode='Markdown'
                )
                channel_album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.room_message_for_channel(data)
                    ),
                    parse_mode='Markdown'
                )
            else:
                album.attach_photo(photo_id)
                channel_album.attach_photo(photo_id)
        await message.answer_media_group(media=album)
        await bot.send_media_group(TELEGRAM_CHANNEL_ID, channel_album)
    await state.finish()


# --------------------------------------------------------------------------
# ------------------- –û–ü–†–û–° –ü–û –î–û–ú–£ ------------------------------------
# --------------------------------------------------------------------------
@dp.callback_query_handler(text='–î–æ–º')
async def add_house(callback: CallbackQuery, state: FSMContext):

    await state.update_data(house_reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.\n\n'
        + '‚úè *–£–∫–∞–∂–∏ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–∞:*\n\n'
        + '‚úè –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–∞/—Å–µ–ª–∞/–¥–µ—Ä–µ–≤–Ω–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ @davletelvir, –¥–æ–±–∞–≤–ª—é.',
        reply_markup=keyboards.microregion_keyboard('object'),
        parse_mode='Markdown'
    )
    await HouseCallbackStates.H1.set()


@dp.callback_query_handler(
    state=HouseCallbackStates.H1,
    text=object_microregions.append('–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞')
)
async def entering_house_street_name(
    callback: CallbackQuery, state: FSMContext
):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–∏—Ä–æ—Ä–∞–π–æ–Ω–∞"""
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_microregion=callback.data)
        await callback.message.edit_text(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã* (–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ - –ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await HouseCallbackStates.next()


@dp.message_handler(state=HouseCallbackStates.H2)
async def entering_house_purpose(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(house_street_name=answer)
        await message.answer(
            '‚úè –£–∫–∞–∂–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞',
            reply_markup=keyboards.purpose_choise_keyboard()
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H3, text=[
        '–ò–ñ–°',
        '–°–ù–¢, –î–ù–¢',
        '–õ–ü–•',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_house_finish(
    callback: CallbackQuery, state: FSMContext
):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_purpose=callback.data)
        await callback.message.edit_text(
            '‚úè –≠—Ç–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            reply_markup=keyboards.yes_no_keyboard(item='house_finish')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H4, text=[
        'yes_house_finish',
        'no_house_finish',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_house_material(
    callback: CallbackQuery, state: FSMContext
):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_finish':
            await state.update_data(house_finish='–î–∞')
        if callback.data == 'no_house_finish':
            await state.update_data(house_finish='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –£–∫–∞–∂–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–æ–º–∞',
            reply_markup=keyboards.material_choice_keyboard()
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H5, text=[
        '–ö–∏—Ä–ø–∏—á',
        '–ó–∞–ª–∏–≤–Ω–æ–π',
        '–ë–ª–æ–∫, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω—ã–π –∫–∏—Ä–ø–∏—á–æ–º',
        '–î–µ—Ä–µ–≤–æ',
        '–î–µ—Ä–µ–≤–æ, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω–æ–µ –∫–∏—Ä–ø–∏—á–æ–º',
        '–î—Ä—É–≥–æ–µ',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_gas(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_material=callback.data)
        await callback.message.edit_text(
            '‚úè –£–∫–∞–∂–∏ —Å—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–º–∞',
            reply_markup=keyboards.gaz_choise_keyboard()
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H6, text=[
        '–ì–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –¥–æ–º –æ—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è',
        '–£–ª–∏—Ü–∞ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞, –¥–æ–º - –Ω–µ—Ç',
        '–£–ª–∏—Ü–∞ –Ω–µ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_waters(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_gaz=callback.data)
        await callback.message.edit_text(
            '‚úè –í –¥–æ–º–µ –µ—Å—Ç—å –≤–æ–¥–∞?',
            reply_markup=keyboards.water_choice_keyboard()
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H7, text=[
        '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ',
        '–ö–æ–ª–æ–¥–µ—Ü',
        '–í–æ–¥–∞ –ø–æ —É–ª–∏—Ü–µ',
        '–í–æ–¥—ã –Ω–µ—Ç',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_sauna(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_water=callback.data)
        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞/–≤ –¥–æ–º–µ –µ—Å—Ç—å –±–∞–Ω—è –∏–ª–∏ —Å–∞—É–Ω–∞',
            reply_markup=keyboards.yes_no_keyboard(item='house_sauna')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H8, text=[
        'yes_house_sauna',
        'no_house_sauna',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_garage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_sauna':
            await state.update_data(house_sauna='–ï—Å—Ç—å')
        if callback.data == 'no_house_sauna':
            await state.update_data(house_sauna='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –µ—Å—Ç—å –≥–∞—Ä–∞–∂?',
            reply_markup=keyboards.yes_no_keyboard(item='house_garage')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H9, text=[
        'yes_house_garage',
        'no_house_garage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_fence(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_garage':
            await state.update_data(house_garage='–ï—Å—Ç—å')
        if callback.data == 'no_house_garage':
            await state.update_data(house_garage='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω?',
            reply_markup=keyboards.yes_no_keyboard(item='house_fence')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H10, text=[
        'yes_house_fence',
        'no_house_fence',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_road(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_fence':
            await state.update_data(house_fence='–ï—Å—Ç—å')
        if callback.data == 'no_house_fence':
            await state.update_data(house_fence='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –ö —É—á–∞—Å—Ç–∫—É –µ—Å—Ç—å –ø—Ä–æ–µ–∑–¥?',
            reply_markup=keyboards.road_choice_keyboard()
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H11, text=[
        '–ê—Å—Ñ–∞–ª—å—Ç',
        '–ù–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ù–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ë–µ–∑–¥–æ—Ä–æ–∂—å–µ, –∑–∞—Ç—Ä—É–¥–Ω—è—é—â–µ–µ –ø—Ä–æ–µ–∑–¥',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_area(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(house_road=callback.data)
        await callback.message.edit_text(
            '‚úè *–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞,* –∫–∞–∫ –≤ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–µ. '
            + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç–µ–π.\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await HouseCallbackStates.next()


@dp.message_handler(state=HouseCallbackStates.H12)
async def entering_house_land_area(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(house_area=answer)
            await message.answer(
                '‚úè *–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ —Å–æ—Ç–∫–∞—Ö.* '
                + '(–ó–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 100) '
                + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç–µ–π.\n\n'
                + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await HouseCallbackStates.next()

        except (ValueError) as e:
            await HouseCallbackStates.H12.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=HouseCallbackStates.H13)
async def entering_house_price(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(house_land_area=answer)
            await message.answer(
                message_texts.on.get('enter_price'),
                parse_mode='Markdown'
            )
            await HouseCallbackStates.next()

        except (ValueError) as e:
            await HouseCallbackStates.H13.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=HouseCallbackStates.H14)
async def entering_house_description(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = int(message.text)
            await state.update_data(house_price=answer)
            await message.answer(
                message_texts.entering_description_text('–¥–æ–º–∞'),
                parse_mode='Markdown'
            )
            await HouseCallbackStates.next()

        except (ValueError) as e:
            await HouseCallbackStates.H14.set()
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=HouseCallbackStates.H15)
async def entering_house_encumbrance(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if len(message.text) <= 200:
            await state.update_data(house_description=answer)
            await message.answer(
                '‚úè –ù–∞ –¥–æ–º–µ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
                reply_markup=keyboards.yes_no_keyboard('house_encumbrance')
            )
            await HouseCallbackStates.next()
        else:
            await message.answer(
                message_texts.character_limit(len(message.text))
            )
            logging.error('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞–∫–æ–≤')
            await HouseCallbackStates.H15.set()


@dp.callback_query_handler(
    state=HouseCallbackStates.H16,
    text=[
        'yes_house_encumbrance',
        'no_house_encumbrance',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_children(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_encumbrance':
            await state.update_data(house_encumbrance=True)
        if callback.data == 'no_house_encumbrance':
            await state.update_data(house_encumbrance=False)
        await callback.message.edit_text(
            '‚úè –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
            reply_markup=keyboards.yes_no_keyboard('house_children')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H17,
    text=[
        'yes_house_children',
        'no_house_children',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_mortage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_children':
            await state.update_data(house_children=True)
        if callback.data == 'no_house_children':
            await state.update_data(house_children=False)
        await callback.message.edit_text(
            '‚úè –î–æ–º –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
            reply_markup=keyboards.yes_no_keyboard('house_mortage')
        )
        await HouseCallbackStates.next()


@dp.callback_query_handler(
    state=HouseCallbackStates.H18,
    text=[
        'yes_house_mortage',
        'no_house_mortage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_house_phone_number(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_house_mortage':
            await state.update_data(house_mortage=True)
        if callback.data == 'no_house_mortage':
            await state.update_data(house_mortage=False)
        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await HouseCallbackStates.next()


@dp.message_handler(state=HouseCallbackStates.H19)
async def entering_house_agency_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(house_owner_phone_number='+7' + message.text[1:])
            await message.answer(
                '‚úè *–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ–º–∞?*\n\n'
                '–ï–≥–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n'
                + '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await HouseCallbackStates.H20.set()
        else:
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.phone_number_entering_error(message.text),
                parse_mode='Markdown'
            )
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await HouseCallbackStates.H19.set()


@dp.message_handler(state=HouseCallbackStates.H20)
async def entering_house_rieltor_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(house_owner_name=answer)
        await message.answer(
            '‚úè –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 6 —Ñ–æ—Ç–æ –¥–æ–º–∞\n\n'
        )
        await HouseCallbackStates.H22.set()


@dp.message_handler(state=HouseCallbackStates.H22, content_types=ContentType.PHOTO)
async def house_report_photo(message: Message):
    global images
    key = str(message.from_user.id)
    images.setdefault(key, [])

    if len(images[key]) == 0:
        images[key].append(message.photo[-1].file_id)
        await message.answer(message_texts.on.get('code_word_text'))
        await HouseCallbackStates.H23.set()
    else:
        images[key].append(message.photo[-1].file_id)


@dp.message_handler(state=HouseCallbackStates.H23)
async def house_base_updating(message: Message, state: FSMContext):

    await state.update_data(house_code_word=message.text)
    user_id = message.from_user.id

    rieltor = Rieltors.objects.get(user_id=user_id)
    photo = images.get(str(user_id))
    images.pop(str(user_id))
    await state.update_data(house_photo=photo)
    await state.update_data(
            house_user_id=user_id,
            house_rieltor_name=rieltor.name,
            house_agency_name=rieltor.agency_name,
            house_rieltor_phone_number=rieltor.phone_number
            )

    data = await state.get_data()

    # –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ –ò –≤—ã–¥–∞—á–∞
    await asyncio.sleep(2)
    if not DB_Worker.house_to_db(data):
        await message.answer(
            message_texts.on.get('sorry_about_error')
        )
    else:
        album = MediaGroup()
        channel_album = MediaGroup()
        photo_list = data.get('house_photo')
        for photo_id in photo_list:
            if photo_id == photo_list[-1]:
                album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.house_adding_result_text(data)
                    ),
                    parse_mode='Markdown'
                )
                channel_album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.house_message_for_channel(data)
                    ),
                    parse_mode='Markdown'
                )
            else:
                album.attach_photo(photo_id)
                channel_album.attach_photo(photo_id)
        await message.answer_media_group(media=album)
        await bot.send_media_group(TELEGRAM_CHANNEL_ID, channel_album)
    await state.finish()


# --------------------------------------------------------------------------
# ------------------- –û–ü–†–û–° –ü–û –¢–ê–£–ù–•–ê–£–°–£ ------------------------------------
# --------------------------------------------------------------------------
@dp.callback_query_handler(text='–¢–∞—É–Ω—Ö–∞—É—Å')
async def add_townhouse(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—É–Ω—Ö–∞—É—Å–∞"""

    await state.update_data(townhouse_reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.\n\n'
        + '‚úè *–£–∫–∞–∂–∏ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–∞—É–Ω—Ö–∞—É—Å–∞.*\n\n'
        + '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–∞/—Å–µ–ª–∞/–¥–µ—Ä–µ–≤–Ω–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ @davletelvir, –¥–æ–±–∞–≤–ª—é.\n\n'
        + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
        reply_markup=keyboards.microregion_keyboard('object'),
        parse_mode='Markdown'
    )
    await TownHouseCallbackStates.T1.set()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T1,
    text=object_microregions.append('–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞')
)
async def entering_townhouse_street_name(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_microregion=callback.data)
        await callback.message.edit_text(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã* (–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ - –ø–æ –∂–µ–ª–∞–Ω–∏—é)\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await TownHouseCallbackStates.next()


@dp.message_handler(state=TownHouseCallbackStates.T2)
async def entering_townhouse_purpose(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(townhouse_street_name=answer)
        await message.answer(
            '‚úè –£–∫–∞–∂–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞',
            reply_markup=keyboards.purpose_choise_keyboard()
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T3, text=[
        '–ò–ñ–°',
        '–°–ù–¢, –î–ù–¢',
        '–õ–ü–•',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_townhouse_finish(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_purpose=callback.data)
        await callback.message.edit_text(
            '‚úè –≠—Ç–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            reply_markup=keyboards.yes_no_keyboard(item='townhouse_finish')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T4, text=[
        'yes_townhouse_finish', 'no_townhouse_finish', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_material(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_finish':
            await state.update_data(townhouse_finish='–î–∞')
        if callback.data == 'no_townhouse_finish':
            await state.update_data(townhouse_finish='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω',
            reply_markup=keyboards.material_choice_keyboard()
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T5, text=[
        '–ö–∏—Ä–ø–∏—á',
        '–ó–∞–ª–∏–≤–Ω–æ–π',
        '–ë–ª–æ–∫, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω—ã–π –∫–∏—Ä–ø–∏—á–æ–º',
        '–î–µ—Ä–µ–≤–æ',
        '–î–µ—Ä–µ–≤–æ, –æ–±–ª–∏—Ü–æ–≤–∞–Ω–Ω–æ–µ –∫–∏—Ä–ø–∏—á–æ–º',
        '–î—Ä—É–≥–æ–µ',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_gas(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_material=callback.data)
        await callback.message.edit_text(
            '‚úè –£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –≥–∞–∑–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            reply_markup=keyboards.gaz_choise_keyboard()
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T6, text=[
        '–ì–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –¥–æ–º –æ—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è',
        '–£–ª–∏—Ü–∞ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–Ω–∞, –¥–æ–º - –Ω–µ—Ç',
        '–£–ª–∏—Ü–∞ –Ω–µ –≥–∞–∑–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_waters(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_gaz=callback.data)
        await callback.message.edit_text(
            '‚úè –í —Ç–∞—É–Ω—Ö–∞—É—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –≤–æ–¥–∞?',
            reply_markup=keyboards.water_choice_keyboard()
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T7, text=[
        '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ',
        '–ö–æ–ª–æ–¥–µ—Ü',
        '–í–æ–¥–∞ –ø–æ —É–ª–∏—Ü–µ',
        '–í–æ–¥—ã –Ω–µ—Ç',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_sauna(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_water=callback.data)
        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –±–∞–Ω—è –∏–ª–∏ —Å–∞—É–Ω–∞',
            reply_markup=keyboards.yes_no_keyboard(item='townhouse_sauna')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T8, text=[
        'yes_townhouse_sauna',
        'no_townhouse_sauna',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_garage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_sauna':
            await state.update_data(townhouse_sauna='–ï—Å—Ç—å')
        if callback.data == 'no_townhouse_sauna':
            await state.update_data(townhouse_sauna='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –µ—Å—Ç—å –≥–∞—Ä–∞–∂?',
            reply_markup=keyboards.yes_no_keyboard(item='townhouse_garage')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T9, text=[
        'yes_townhouse_garage',
        'no_townhouse_garage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_fence(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_garage':
            await state.update_data(townhouse_garage='–ï—Å—Ç—å')
        if callback.data == 'no_townhouse_garage':
            await state.update_data(townhouse_garage='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω?',
            reply_markup=keyboards.yes_no_keyboard(item='townhouse_fence')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T10, text=[
        'yes_townhouse_fence',
        'no_townhouse_fence',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_road(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_fence':
            await state.update_data(townhouse_fence='–ï—Å—Ç—å')
        if callback.data == 'no_townhouse_fence':
            await state.update_data(townhouse_fence='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –ö —É—á–∞—Å—Ç–∫—É –µ—Å—Ç—å –ø—Ä–æ–µ–∑–¥?',
            reply_markup=keyboards.road_choice_keyboard()
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T11, text=[
        '–ê—Å—Ñ–∞–ª—å—Ç',
        '–ù–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ù–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ë–µ–∑–¥–æ—Ä–æ–∂—å–µ, –∑–∞—Ç—Ä—É–¥–Ω—è—é—â–µ–µ –ø—Ä–æ–µ–∑–¥',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_area(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(townhouse_road=callback.data)
        await callback.message.edit_text(
            message_texts.on.get('area_entering_text'),
            parse_mode='Markdown'
        )
        await TownHouseCallbackStates.next()


@dp.message_handler(state=TownHouseCallbackStates.T12)
async def entering_townhouse_land_area(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(townhouse_area=answer)
            await message.answer(
                '‚úè *–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ —Å–æ—Ç–∫–∞—Ö.* '
                + '(–ó–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 100) '
                + '–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç–µ–π.\n\n'
                + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await TownHouseCallbackStates.next()

        except (ValueError) as e:
            await TownHouseCallbackStates.T12.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=TownHouseCallbackStates.T13)
async def entering_townhouse_price(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(townhouse_land_area=answer)
            await message.answer(
                message_texts.on.get('enter_price'),
                parse_mode='Markdown'
            )
            await TownHouseCallbackStates.next()

        except (ValueError) as e:
            await TownHouseCallbackStates.T13.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=TownHouseCallbackStates.T14)
async def entering_townhouse_description(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = int(message.text)
            await state.update_data(townhouse_price=answer)
            await message.answer(
                message_texts.entering_description_text('—Ç–∞—É–Ω—Ö–∞—É—Å–∞'),
                parse_mode='Markdown'
            )
            await TownHouseCallbackStates.next()

        except (ValueError) as e:
            await TownHouseCallbackStates.T14.set()
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=TownHouseCallbackStates.T15)
async def entering_townhouse_encumbrance(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if len(message.text) <= 200:
            await state.update_data(townhouse_description=answer)
            await message.answer(
                '‚úè –ù–∞ —Ç–∞—É–Ω—Ö–∞—É—Å–µ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
                reply_markup=keyboards.yes_no_keyboard('townhouse_encumbrance')
            )
            await TownHouseCallbackStates.next()
        else:
            await message.answer(
                message_texts.character_limit(len(message.text))
            )
            logging.error('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞–∫–æ–≤')
            await TownHouseCallbackStates.T15.set()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T16,
    text=[
        'yes_townhouse_encumbrance',
        'no_townhouse_encumbrance',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_children(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_encumbrance':
            await state.update_data(townhouse_encumbrance=True)
        if callback.data == 'no_townhouse_encumbrance':
            await state.update_data(townhouse_encumbrance=False)
        await callback.message.edit_text(
            '‚úè –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
            reply_markup=keyboards.yes_no_keyboard('townhouse_children')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T17,
    text=[
        'yes_townhouse_children',
        'no_townhouse_children',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_mortage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_children':
            await state.update_data(townhouse_children=True)
        if callback.data == 'no_townhouse_children':
            await state.update_data(townhouse_children=False)
        await callback.message.edit_text(
            '‚úè –¢–∞—É–Ω—Ö–∞—É—Å—ã –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
            reply_markup=keyboards.yes_no_keyboard('townhouse_mortage')
        )
        await TownHouseCallbackStates.next()


@dp.callback_query_handler(
    state=TownHouseCallbackStates.T18,
    text=[
        'yes_townhouse_mortage',
        'no_townhouse_mortage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
    ]
)
async def entering_townhouse_phone_number(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_townhouse_mortage':
            await state.update_data(townhouse_mortage=True)
        if callback.data == 'no_townhouse_mortage':
            await state.update_data(townhouse_mortage=False)
        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await TownHouseCallbackStates.next()


@dp.message_handler(state=TownHouseCallbackStates.T19)
async def entering_townhouse_agency_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(townhouse_owner_phone_number='+7' + message.text[1:])
            await message.answer(
                '‚úè *–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ —Ç–∞—É–Ω—Ö–∞—É—Å–∞?*\n\n'
                '–ï–≥–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n'
                + '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await TownHouseCallbackStates.T20.set()
        else:
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.phone_number_entering_error(message.text),
                parse_mode='Markdown'
            )
            logging.error(f'üßê –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await TownHouseCallbackStates.T19.set()


@dp.message_handler(state=TownHouseCallbackStates.T20)
async def entering_townhouse_rieltor_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(townhouse_owner_name=answer)
        await message.answer(
            '‚úè –ó–∞–≥—Ä—É–∑–∏ –¥–æ 6 —Ñ–æ—Ç–æ —Ç–∞—É–Ω—Ö–∞—É—Å–∞\n\n'
        )
        await TownHouseCallbackStates.T22.set()


@dp.message_handler(state=TownHouseCallbackStates.T22, content_types=ContentType.PHOTO)
async def townhouse_report_photo(message: Message):
    global images
    key = str(message.from_user.id)
    images.setdefault(key, [])

    if len(images[key]) == 0:
        images[key].append(message.photo[-1].file_id)
        await message.answer(message_texts.on.get('code_word_text'))
        await TownHouseCallbackStates.T23.set()
    else:
        images[key].append(message.photo[-1].file_id)


@dp.message_handler(state=TownHouseCallbackStates.T23)
async def townhouse_base_updating(message: Message, state: FSMContext):

    await state.update_data(townhouse_code_word=message.text)
    user_id = message.from_user.id

    rieltor = Rieltors.objects.get(user_id=user_id)
    photo = images.get(str(user_id))
    images.pop(str(user_id))
    await state.update_data(townhouse_photo=photo)
    await state.update_data(
            townhouse_user_id=user_id,
            townhouse_rieltor_name=rieltor.name,
            townhouse_agency_name=rieltor.agency_name,
            townhouse_rieltor_phone_number=rieltor.phone_number
            )

    data = await state.get_data()

    # –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ –ò –≤—ã–¥–∞—á–∞
    await asyncio.sleep(2)
    if not DB_Worker.townhouse_to_db(data):
        await message.answer(
            message_texts.on.get('sorry_about_error')
        )
    else:
        album = MediaGroup()
        channel_album = MediaGroup()
        photo_list = data.get('townhouse_photo')
        for photo_id in photo_list:
            if photo_id == photo_list[-1]:
                album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.townhouse_adding_result_text(data)
                    ),
                    parse_mode='Markdown'
                )
                channel_album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.townhouse_message_for_channel(data)
                    ),
                    parse_mode='Markdown'
                )
            else:
                album.attach_photo(photo_id)
                channel_album.attach_photo(photo_id)
        await message.answer_media_group(media=album)
        await bot.send_media_group(TELEGRAM_CHANNEL_ID, channel_album)
    await state.finish()


# --------------------------------------------------------------------------
# ------------------- –û–ü–†–û–° –ü–û –£–ß–ê–°–¢–ö–£ ------------------------------------
# --------------------------------------------------------------------------
@dp.callback_query_handler(text='–£—á–∞—Å—Ç–æ–∫')
async def add_land(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–∫–∞"""

    await state.update_data(land_reality_category=callback.data)
    await callback.message.edit_text(
        '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –≤–∞—à –æ–±—ä–µ–∫—Ç '
        + '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. üòè –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2-3—Ö –º–∏–Ω—É—Ç.\n\n'
        + '‚úè *–£–∫–∞–∂–∏—Ç–µ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–∫–∞.*\n\n'
        + '‚úè –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–∞/—Å–µ–ª–∞/–¥–µ—Ä–µ–≤–Ω–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ @davletelvir, –¥–æ–±–∞–≤–ª—é.\n\n'
        + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
        reply_markup=keyboards.microregion_keyboard('object'),
        parse_mode='Markdown'
    )
    await LandCallbackStates.L1.set()


@dp.callback_query_handler(
    state=LandCallbackStates.L1,
    text=object_microregions.append('–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞')
)
async def entering_land_street_name(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(land_microregion=callback.data)
        await callback.message.edit_text(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.*\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await LandCallbackStates.next()


@dp.message_handler(state=LandCallbackStates.L2)
async def entering_land_number(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(land_street_name=answer)
        await message.answer(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞.*\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await LandCallbackStates.next()


@dp.message_handler(state=LandCallbackStates.L3)
async def entering_land_purpose(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if '"' in answer:
            formatting_answer = answer.replace('"', '')
            answer = formatting_answer

        if ' ' in answer:
            formatting_answer = answer.replace(' ', '')
            answer = formatting_answer

        answer = answer.upper()
        await state.update_data(land_number_name=answer)
        await message.answer(
            '‚úè –£–∫–∞–∂–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞',
            reply_markup=keyboards.purpose_choise_keyboard()
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L4,
    text=['–ò–ñ–°', '–°–ù–¢, –î–ù–¢', '–õ–ü–•', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞']
)
async def entering_land_gas(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(land_purpose=callback.data)
        await callback.message.edit_text(
            '‚úè –ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–∞–∑',
            reply_markup=keyboards.yes_no_keyboard('land_gaz')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L5, text=[
        'yes_land_gaz',
        'no_land_gaz',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_waters(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_gaz':
            await state.update_data(land_gaz='–î–∞')
        if callback.data == 'no_land_gaz':
            await state.update_data(land_gaz='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –ü–æ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–æ–¥–∞?',
            reply_markup=keyboards.yes_no_keyboard('land_water')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L6, text=[
        'yes_land_water',
        'no_land_water',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_sauna(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_water':
            await state.update_data(land_water='–î–∞')
        if callback.data == 'no_land_water':
            await state.update_data(land_water='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –±–∞–Ω—è –∏–ª–∏ —Å–∞—É–Ω–∞',
            reply_markup=keyboards.yes_no_keyboard(item='land_sauna')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L7, text=[
        'yes_land_sauna',
        'no_land_sauna',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_garage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_sauna':
            await state.update_data(land_sauna='–ï—Å—Ç—å')
        if callback.data == 'no_land_sauna':
            await state.update_data(land_sauna='–ù–µ—Ç')

        await callback.message.edit_text(
            '‚úè –ù–∞ —Ç–µ—Ä–∏–∏—Ç–æ—Ä–∏–∏ —É—á–∞—Å—Ç–∫–∞ –µ—Å—Ç—å –≥–∞—Ä–∞–∂?',
            reply_markup=keyboards.yes_no_keyboard(item='land_garage')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L8, text=[
        'yes_land_garage',
        'no_land_garage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_fence(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_garage':
            await state.update_data(land_garage='–ï—Å—Ç—å')
        if callback.data == 'no_land_garage':
            await state.update_data(land_garage='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –£—á–∞—Å—Ç–æ–∫ –æ–≥–æ—Ä–æ–∂–µ–Ω?',
            reply_markup=keyboards.yes_no_keyboard(item='land_fence')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L9, text=[
        'yes_land_fence',
        'no_land_fence',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_road(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_fence':
            await state.update_data(land_fence='–ï—Å—Ç—å')
        if callback.data == 'no_land_fence':
            await state.update_data(land_fence='–ù–µ—Ç')
        await callback.message.edit_text(
            '‚úè –ö —É—á–∞—Å—Ç–∫—É –µ—Å—Ç—å –ø—Ä–æ–µ–∑–¥?',
            reply_markup=keyboards.road_choice_keyboard()
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L10, text=[
        '–ê—Å—Ñ–∞–ª—å—Ç',
        '–ù–µ–ø–ª–æ—Ö–∞—è –Ω–∞—Å—ã–ø–Ω–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ù–µ–ø–ª–æ—Ö–∞—è –≥—Ä—É–Ω—Ç–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞',
        '–ë–µ–∑–¥–æ—Ä–æ–∂—å–µ, –∑–∞—Ç—Ä—É–¥–Ω—è—é—â–µ–µ –ø—Ä–æ–µ–∑–¥',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_area(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(land_road=callback.data)
        await callback.message.edit_text(
            '‚úè *–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ –≤ —Å–æ—Ç–∫–∞—Ö.* '
            + '(–ó–Ω–∞—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 100) '
            + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "." –¥–ª—è –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç–µ–π.',
            parse_mode='Markdown'
        )
        await LandCallbackStates.next()


@dp.message_handler(state=LandCallbackStates.L11)
async def entering_land_price(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = message.text
            if ',' in message.text:
                formatting_string = message.text.replace(',', '.')
                answer = float(formatting_string)
            else:
                answer = float(message.text)
            await state.update_data(land_area=answer)
            await message.answer(
                message_texts.on.get('enter_price'),
                parse_mode='Markdown'
            )
            await LandCallbackStates.next()
        except (ValueError) as e:
            await LandCallbackStates.L11.set()
            await message.answer(
                message_texts.on.get('area_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=LandCallbackStates.L12)
async def entering_land_description(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        try:
            answer = int(message.text)
            await state.update_data(land_price=answer)
            await message.answer(
                message_texts.entering_description_text('—É—á–∞—Å—Ç–∫–∞'),
                parse_mode='Markdown'
            )
            await LandCallbackStates.next()

        except (ValueError) as e:
            await LandCallbackStates.L12.set()
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


@dp.message_handler(state=LandCallbackStates.L13)
async def entering_land_encumbrance(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text
        if len(message.text) <= 200:
            await state.update_data(land_description=answer)
            await message.answer(
                '‚úè –ù–∞ –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å –æ–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ?',
                reply_markup=keyboards.yes_no_keyboard('land_encumbrance')
            )
            await LandCallbackStates.next()
        else:
            await message.answer(
                message_texts.character_limit(len(message.text))
            )
            logging.error('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–Ω–∞–∫–æ–≤')
            await LandCallbackStates.L13.set()


@dp.callback_query_handler(
    state=LandCallbackStates.L14,
    text=[
        'yes_land_encumbrance',
        'no_land_encumbrance',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_children(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_encumbrance':
            await state.update_data(land_encumbrance=True)
        if callback.data == 'no_land_encumbrance':
            await state.update_data(land_encumbrance=False)
        await callback.message.edit_text(
            '‚úè –í —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –¥–µ—Ç–∏?',
            reply_markup=keyboards.yes_no_keyboard('land_children')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L15,
    text=[
        'yes_land_children',
        'no_land_children',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_mortage(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_children':
            await state.update_data(land_children=True)
        if callback.data == 'no_land_children':
            await state.update_data(land_children=False)
        await callback.message.edit_text(
            '‚úè –î–æ–º –≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –∏–ø—Ç–æ–µ–∫–µ?',
            reply_markup=keyboards.yes_no_keyboard('land_mortage')
        )
        await LandCallbackStates.next()


@dp.callback_query_handler(
    state=LandCallbackStates.L16,
    text=[
        'yes_land_mortage',
        'no_land_mortage',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'
    ]
)
async def entering_land_phone_number(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if callback.data == 'yes_land_mortage':
            await state.update_data(land_mortage=True)
        if callback.data == 'no_land_mortage':
            await state.update_data(land_mortage=False)
        await callback.message.edit_text(
            message_texts.on.get('phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await LandCallbackStates.next()


@dp.message_handler(state=LandCallbackStates.L17)
async def entering_land_agency_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(land_owner_phone_number='+7' + message.text[1:])
            await message.answer(
                '‚úè *–ö–∞–∫ –∑–æ–≤—É—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ —É—á–∞—Å—Ç–∫–∞?*\n\n'
                '–ï–≥–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n'
                + '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await LandCallbackStates.next()
        else:
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.phone_number_entering_error(message.text),
                parse_mode='Markdown'
            )
            logging.error(f'üßê –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await LandCallbackStates.L17.set()


@dp.message_handler(state=LandCallbackStates.L18)
async def entering_land_rieltor_name(
    message: Message, state: FSMContext
):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        answer = message.text.title()
        await state.update_data(land_owner_name=answer)
        await message.answer(
            '‚úè –ó–∞–≥—Ä—É–∑–∏ –¥–æ 6 —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–∫–∞\n\n'
        )
        await LandCallbackStates.L20.set()


@dp.message_handler(state=LandCallbackStates.L20, content_types=ContentType.PHOTO)
async def land_report_photo(message: Message):
    global images
    key = str(message.from_user.id)
    images.setdefault(key, [])

    if len(images[key]) == 0:
        images[key].append(message.photo[-1].file_id)
        await message.answer(message_texts.on.get('code_word_text'))
        await LandCallbackStates.L21.set()
    else:
        images[key].append(message.photo[-1].file_id)


@dp.message_handler(state=LandCallbackStates.L21)
async def land_base_updating(message: Message, state: FSMContext):

    await state.update_data(land_code_word=message.text)
    user_id = message.from_user.id

    rieltor = Rieltors.objects.get(user_id=user_id)
    photo = images.get(str(user_id))
    images.pop(str(user_id))
    await state.update_data(land_photo=photo)
    await state.update_data(
            land_user_id=user_id,
            land_rieltor_name=rieltor.name,
            land_agency_name=rieltor.agency_name,
            land_rieltor_phone_number=rieltor.phone_number
            )

    data = await state.get_data()

    # –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ –ò –≤—ã–¥–∞—á–∞
    await asyncio.sleep(2)
    if not DB_Worker.land_to_db(data):
        await message.answer(
            message_texts.on.get('sorry_about_error')
        )
    else:
        album = MediaGroup()
        channel_album = MediaGroup()
        photo_list = data.get('land_photo')
        for photo_id in photo_list:
            if photo_id == photo_list[-1]:
                album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.land_adding_result_text(data)
                    ),
                    parse_mode='Markdown'
                )
                channel_album.attach_photo(
                    photo_id,
                    caption='\n'.join(
                        message_texts.land_message_for_channel(data)
                    ),
                    parse_mode='Markdown'
                )
            else:
                album.attach_photo(photo_id)
                channel_album.attach_photo(photo_id)
        await message.answer_media_group(media=album)
        await bot.send_media_group(TELEGRAM_CHANNEL_ID, channel_album)
    await state.finish()

# -----------------------------------------------------------------------------
# -------------- –ú–û–ò –û–ë–™–ï–ö–¢–´ --------------------------------------------------
# -----------------------------------------------------------------------------
@dp.message_handler(commands=['myobjects'])
async def entering_phone_number_for_searching(message: Message):
    DB_Worker.command_counting()

    apartment_queryset = Apartment.objects.filter(user_id=message.from_user.id)
    room_queryset = Room.objects.filter(user_id=message.from_user.id)
    house_queryset = House.objects.filter(user_id=message.from_user.id)
    townhouse_queryset = TownHouse.objects.filter(user_id=message.from_user.id)
    land_queryset = Land.objects.filter(user_id=message.from_user.id)

    apartment_count = apartment_queryset.count()
    room_count = room_queryset.count()
    house_count = house_queryset.count()
    townhouse_count = townhouse_queryset.count()
    land_count = land_queryset.count()

    total_count = apartment_count + room_count + house_count + townhouse_count + land_count

    data = {
        'total_count': total_count,
        'apartment_count': apartment_count,
        'room_count': room_count,
        'house_count': house_count,
        'townhouse_count': townhouse_count,
        'land_count': land_count,
    }

    await message.answer(
        message_texts.my_objects_text(data),
        disable_notification=True,
        parse_mode='Markdown'
    )
    for item in apartment_queryset:
        await asyncio.sleep(0.5)
        await message.answer(
            f'*{item.room_quantity} –∫.–∫–≤.* '
            + f'{item.street_name} –¥.{item.number_of_house}, '
            + f'{item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*\n'
            + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
            disable_notification=True,
            parse_mode='Markdown'
        )

    for item in room_queryset:
        await asyncio.sleep(0.5)
        await message.answer(
            f'*–ö–æ–º–Ω–∞—Ç–∞* {item.street_name} '
            + f'–¥.{item.number_of_house}, {item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*\n'
            + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
            disable_notification=True,
            parse_mode='Markdown'
        )

    for item in house_queryset:
        await asyncio.sleep(0.5)
        await message.answer(
            f'*–î–æ–º* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
            + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
            disable_notification=True,
            parse_mode='Markdown'
        )

    for item in townhouse_queryset:
        await asyncio.sleep(0.5)
        await message.answer(
            f'*–¢–∞—É–Ω—Ö–∞—É—Å* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
            + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
            disable_notification=True,
            parse_mode='Markdown'
        )

    for item in land_queryset:
        await asyncio.sleep(0.5)
        await message.answer(
            f'*–£—á–∞—Å—Ç–æ–∫* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
            + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
            disable_notification=True,
            parse_mode='Markdown'
        )
# -----------------------------------------------------------------------------
# --------------------–£–î–ê–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê-----------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['deleteobject'])
async def delete_object(message: Message):

    DB_Worker.command_counting()
    user_id = message.from_user.id

    cond1 = Apartment.objects.filter(user_id=user_id).exists()
    cond2 = Room.objects.filter(user_id=user_id).exists()
    cond3 = House.objects.filter(user_id=user_id).exists()
    cond4 = TownHouse.objects.filter(user_id=user_id).exists()
    cond5 = Land.objects.filter(user_id=user_id).exists()

    big_cond = cond1 or cond2 or cond3 or cond4 or cond5

    if big_cond:
        await message.answer(
            '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            reply_markup=keyboards.objects_list_keyboard(user_id)
        )
        await DeleteCallbackStates.D2.set()
    else:
        await message.answer(
            ' –£ —Ç–µ–±—è –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ'
        )


@dp.callback_query_handler(state=DeleteCallbackStates.D2)
async def deleting_object(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        category = callback.data.split()[1]
        id = callback.data.split()[0]

        try:
            def get_number_of_house(category, obj):
                if (category == 'House') or (category == "TownHouse"):
                    return ''
                elif category == 'Lansd':
                    return obj.number_of_land
                return obj.number_of_house

            class_name = Output.str_to_class(category)
            obj = class_name.objects.get(pk=id)
            rieltor = Rieltors.objects.get(user_id=callback.from_user.id)
            Archive.objects.create(
                user_id=callback.from_user.id,
                rieltor_name=rieltor.name,
                agency_name=rieltor.agency_name,
                category=category,
                street_name=obj.street_name,
                object_number=get_number_of_house(category=category, obj=obj),
                owner_phone_number=obj.owner_phone_number,
                owner_name=obj.owner_name
            )
            class_name.objects.filter(pk=id).delete()
            await callback.message.edit_text(
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
            await state.finish()
        except Exception as e:
            await callback.message.answer(
                '‚ùó –í–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.'
                + '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏–µ—Ç –æ–± —ç—Ç–æ–º @davletelvir'
            )
            logging.error(
                f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞, {e}'
            )
            await DeleteCallbackStates.D2.set()
# -----------------------------------------------------------------------------
# -------------- –†–ï–î–ê–ö–¢–ò–†–û–í–ù–ê–ò–ï –¶–ï–ù–´-------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['editprice'])
async def edit_price(message: Message):

    DB_Worker.command_counting()
    user_id = message.from_user.id

    cond1 = Apartment.objects.filter(user_id=user_id).exists()
    cond2 = Room.objects.filter(user_id=user_id).exists()
    cond3 = House.objects.filter(user_id=user_id).exists()
    cond4 = TownHouse.objects.filter(user_id=user_id).exists()
    cond5 = Land.objects.filter(user_id=user_id).exists()

    big_cond = cond1 or cond2 or cond3 or cond4 or cond5

    if big_cond:
        await message.answer(
            '‚úè –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
            reply_markup=keyboards.objects_list_keyboard(user_id)
        )
        await PriceEditCallbackStates.EP2.set()
    else:
        await message.answer(
            ' –£ —Ç–µ–±—è –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ'
        )


@dp.callback_query_handler(
    state=PriceEditCallbackStates.EP2
)
async def entering_new_price(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        category = callback.data.split()[1]
        id = callback.data.split()[0]
        await state.update_data(searching_category=category)
        await state.update_data(searching_id=id)

        await callback.message.edit_text(
            '‚úè *–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É.*\n\n–ü–æ–ª–Ω—É—é —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, '
            + '–Ω–µ —Å–æ–∫—Ä–∞—â–∞—è, –∏ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –†, —Ä, ‚ÇΩ, —Ä—É–±. –∏ —Ç.–ø.',
            parse_mode='Markdown'
        )
        await PriceEditCallbackStates.next()


@dp.message_handler(state=PriceEditCallbackStates.EP3)
async def price_updating_process(
    message: Message, state: FSMContext
):
    try:
        data = await state.get_data()
        class_name = Output.str_to_class(data.get('searching_category'))
        queryset = class_name.objects.get(pk=data.get('searching_id'))
        queryset.price = int(message.text)
        queryset.save()
        await message.answer(
            '–°–¥–µ–ª–∞–Ω–æ!'
        )
        await state.finish()
    except Exception as e:
        await message.answer(
            '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã. \n\n–í–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ '
            + '–±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò –Ω–µ –ø–∏—à–∏ "–†", "—Ä", "—Ä—É–±". '
            + '\n\n‚úè *–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ*',
            parse_mode='Markdown'
        )
        logging.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã, {e}'
        )
        await PriceEditCallbackStates.EP3.set()


@dp.callback_query_handler(text=['–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'])
async def cancel(callback: CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
# -----------------------------------------------------------------------------
# -------------------–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê----------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['addbuyer'])
async def add_buyer(message: Message):

    DB_Worker.command_counting()
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        await message.answer(
            '‚úè *–í–≤–µ–¥–∏ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.*\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await Buyer.buyer_phone_number.set()


@dp.message_handler(state=Buyer.buyer_phone_number)
async def add_phone_number(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()
    else:
        await state.update_data(buyer_name=message.text)
        await message.answer(
            message_texts.on.get('buyer_phone_number_entering_text'),
            parse_mode='Markdown'
        )
        await Buyer.category.set()


@dp.message_handler(state=Buyer.category)
async def add_category(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()
    else:
        if re.match(r"^[0-9]+$", message.text):
            await state.update_data(buyer_phone_number=message.text)
            await message.answer(
                '–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫?\n\n'
                + '–ï—Å–ª–∏ –≤–∞—à –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∏—â–µ—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, '
                + '—Ç–æ –∑–∞–≤–µ–¥–∏ –µ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.',
                reply_markup=keyboards.buyer_searching_category(),
                parse_mode='Markdown'
            )
            await Buyer.limit.set()
        else:
            await message.answer(
                message_texts.phone_number_entering_error(
                    phone_number=message.text
                ),
                parse_mode='Markdown'
            )
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {message.text}')
            await Buyer.category.set()


@dp.callback_query_handler(
    state=Buyer.limit,
    text=[
        '–ø–æ–∏—Å–∫_1–∫.–∫–≤.',
        '–ø–æ–∏—Å–∫_2–∫.–∫–≤.',
        '–ø–æ–∏—Å–∫_3–∫.–∫–≤.',
        '–ø–æ–∏—Å–∫_4–∫.–∫–≤.',
        '–ø–æ–∏—Å–∫_5–∫.–∫–≤.',
        '–ø–æ–∏—Å–∫_–ö–æ–º–Ω–∞—Ç—ã, –ö–ì–¢',
        '–ø–æ–∏—Å–∫_–î–æ–º–∞',
        '–ø–æ–∏—Å–∫_–¢–∞—É–Ω—Ö–∞—É—Å—ã',
        '–ø–æ–∏—Å–∫_–£—á–∞—Å—Ç–∫–∏',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'
    ]
)
async def add_limit(callback: CallbackQuery, state: FSMContext):
    answer = callback.data
    if answer == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if answer in [
            '–ø–æ–∏—Å–∫_1–∫.–∫–≤.', '–ø–æ–∏—Å–∫_2–∫.–∫–≤.', '–ø–æ–∏—Å–∫_3–∫.–∫–≤.',
            '–ø–æ–∏—Å–∫_4–∫.–∫–≤.', '–ø–æ–∏—Å–∫_5–∫.–∫–≤.'
        ]:
            await state.update_data(buyer_search_category=answer[6])
        elif answer == '–ø–æ–∏—Å–∫_–ö–æ–º–Ω–∞—Ç—ã, –ö–ì–¢':
            await state.update_data(buyer_search_category='room')
        elif answer == '–ø–æ–∏—Å–∫_–î–æ–º–∞':
            await state.update_data(buyer_search_category='house')
        elif answer == '–ø–æ–∏—Å–∫_–¢–∞—É–Ω—Ö–∞—É—Å—ã':
            await state.update_data(buyer_search_category='townhouse')
        else:
            await state.update_data(buyer_search_category='land')
        await callback.message.edit_text(
            '‚úè –ö–∞–∫–æ–≤ –ø—Ä–µ–¥–µ–ª —Å—É–º–º—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è?\n\n'
            + '*–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ –≤—Å–µ–º–∏ –Ω—É–ª—è–º–∏.*\n\n'
            + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
            parse_mode='Markdown'
        )
        await Buyer.source.set()


@dp.message_handler(state=Buyer.source)
async def add_source(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()
    else:
        try:
            await state.update_data(buyer_limit=int(message.text))
            await message.answer(
                '‚úè –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
                reply_markup=keyboards.buyer_source_choice_keyboard()
            )
            await Buyer.microregion.set()
        except (ValueError) as e:
            await Buyer.source.set()
            await bot.send_sticker(
                chat_id=message.from_user.id,
                sticker="CAACAgIAAxkBAAEHTQdjxlQRBRdVErSLTW969ee8S0hH1wACqiUAAvY9yUli7kZ2M0wiGC0E"
            )
            await message.answer(
                message_texts.on.get('price_entering_error'),
                parse_mode='Markdown'
            )
            logging.error(f'{e}')


checked = {}


@dp.callback_query_handler(
    state=Buyer.microregion,
    text=[
        '–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç',
        '–ù–∞–ª–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
        '–¢–æ–ª—å–∫–æ –º–∞—Ç. –∫–∞–ø.',
        '–î—Ä. —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
        '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è'
        ]
)
async def add_microregion(callback: CallbackQuery, state: FSMContext):
    global checked
    key = str(callback.from_user.id)
    checked.setdefault(key, [])
    if callback.data == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        await state.update_data(buyer_source=callback.data)
        data = await state.get_data()
        if data.get(
            'buyer_search_category'
        ) in ['1', '2', '3', '4', '5'] or data.get(
            'buyer_search_category'
        ) == 'room':
            await callback.message.edit_text(
                '‚úè –£–∫–∞–∂–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–æ–≤ –ø–æ–∏—Å–∫–∞',
                reply_markup=keyboards.city_microregion_keyboard(checked_buttons=[])
            )
            checked[key] = []
            await Buyer.city_microregion.set()
        if data.get(
            'buyer_search_category'
        ) in ['house', 'townhouse', 'land']:
            await callback.message.edit_text(
                '‚úè –£–∫–∞–∂–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–æ–≤ –ø–æ–∏—Å–∫–∞',
                reply_markup=keyboards.country_microregion_keyboard(checked_buttons=[])
            )
            checked[key] = []
            await Buyer.country_microregion.set()


@dp.callback_query_handler(
    state=Buyer.city_microregion,
    text=object_city_microregions_for_checking
)
async def city_microreg_checkbox(callback: CallbackQuery, state: FSMContext):
    answer = callback.data
    key = str(callback.from_user.id)
    if answer == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä':
            await state.update_data(microregions=checked[key])
            await callback.message.edit_text(
                '‚úè *–î–æ–±–∞–≤—å* –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π* –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é'
                + '(–±–∞–Ω–∫, —á—Ç–æ –ø—Ä–æ–¥–∞—ë—Ç, —Å—É–º–º—É –ü–í, –±–µ–∑ –ü–í, –∏ —Ç.–ø.)\n\n'
                + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await Buyer.base_update.set()
        else:
            if '‚úÖ' in answer:
                checked[key].remove(answer.removeprefix('‚úÖ '))
            else:
                checked[key].append(answer)
            await callback.message.edit_text(
                '‚úè –£–∫–∞–∂–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–æ–≤ –ø–æ–∏—Å–∫–∞',
                reply_markup=keyboards.city_microregion_keyboard(checked_buttons=checked[key])
            )
            await Buyer.city_microregion.set()


@dp.callback_query_handler(
    state=Buyer.country_microregion,
    text=object_country_microregions_for_checking
)
async def country_microreg_checkbox(callback: CallbackQuery, state: FSMContext):
    answer = callback.data
    key = str(callback.from_user.id)
    if answer == '–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        if answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä':
            await state.update_data(microregions=checked[key])
            await callback.message.edit_text(
                '‚úè *–î–æ–±–∞–≤—å* –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π* –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é'
                + '(–±–∞–Ω–∫, —á—Ç–æ –ø—Ä–æ–¥–∞—ë—Ç, —Å—É–º–º—É –ü–í, –±–µ–∑ –ü–í, –∏ —Ç.–ø.)\n\n'
                + 'üôÖ‚Äç‚ôÇÔ∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø"',
                parse_mode='Markdown'
            )
            await Buyer.base_update.set()
        else:
            if '‚úÖ' in answer:
                checked[key].remove(answer.removeprefix('‚úÖ '))
            else:
                checked[key].append(answer)
            await callback.message.edit_text(
                '‚úè –£–∫–∞–∂–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω–æ–≤ –ø–æ–∏—Å–∫–∞',
                reply_markup=keyboards.country_microregion_keyboard(checked_buttons=checked[key])
            )
            await Buyer.country_microregion.set()


@dp.message_handler(state=Buyer.base_update)
async def base_update(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()
    else:
        if len(message.text) <= 500:
            await state.update_data(buyer_comment=message.text, buyer_user_id=message.from_user.id)
            data = await state.get_data()
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É —Å—É–±—ä–µ–∫—Ç–∞
            if not DB_Worker.buyer_to_db(data):
                await message.answer(
                    message_texts.on.get('sorry_about_error')
                )
            else:
                await message.answer('\n'.join(message_texts.buyer_adding_result_text(data=data)))
                class_name = Output.str_to_class(data.get('buyer_search_category').title())
                if class_name == Apartment:
                    queryset = class_name.objects.filter(
                        price__lte=data.get('buyer_limit'),
                        room_quantity=data.get('buyer_search_category')
                    )
                else:
                    queryset = class_name.objects.filter(price__lte=data.get('buyer_limit'))
                if queryset.exists():
                    rieltor = Rieltors.objects.get(user_id=message.from_user.id)
                    for item in queryset:
                        await bot.send_message(
                            chat_id=item.user_id, text='üöÄ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                            + f'@{message.from_user.username}, –ê–ù "{rieltor.agency_name}"'
                            + '–µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π '
                            + '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞ —Ç–≤–æ–π –æ–±—ä–µ–∫—Ç\n'
                            + f'{Output.search_category_output(data.get("buyer_search_category"))}, '
                            + f'—É–ª.{item.street_name}'
                        )

            await state.finish()
        else:
            await message.answer(
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 –∑–Ω–∞–∫–æ–≤. '
                + '*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –∏ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.*',
                parse_mode='Markdown'
            )
            await Buyer.base_update.set()
# -----------------------------------------------------------------------------
# -------------------–£–î–ê–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['deletebuyer'])
async def delete_buyer(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        if BuyerDB.objects.filter(user_id=user_id).exists():
            await message.answer(
                '‚úè –í—ã–±–µ—Ä–∏ –ø–æ–∫—É–ø–∞—Ç–µ—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                reply_markup=keyboards.buyer_list_keyboard(searching_user_id=user_id)
            )
            await DeleteBuyer.step2.set()
        else:
            await message.answer(
                '‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ'
            )


@dp.callback_query_handler(state=DeleteBuyer.step2)
async def deleting_buyer(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        id = callback.data
        try:
            BuyerDB.objects.filter(pk=id).delete()
            await callback.message.edit_text(
                '–°–¥–µ–ª–∞–Ω–æ!'
            )
            await state.finish()
        except Exception as e:
            await callback.message.answer(
                '‚ùé –í–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.'
                + '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @davletelvir'
            )
            logging.error(
                f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É–±—ä–µ–∫—Ç–∞, {e}'
            )
            await DeleteBuyer.step2.set()
# -----------------------------------------------------------------------------
# -------------------–ú–û–ò –ö–õ–ò–ï–ù–¢–´------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['mybuyers'])
async def my_buyers(message: Message):
    DB_Worker.command_counting()
    user_id = message.from_user.id
    queryset = BuyerDB.objects.filter(user_id=user_id)
    if queryset.exists():
        await message.answer(
            f'–£ —Ç–µ–±—è {queryset.count()} –ø–æ–∫—É–ø–∞—Ç–µ–ª—è(-–µ–π):'
        )
        for item in queryset:
            await asyncio.sleep(0.5)
            await message.answer(
                f'‚ùá _–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: {item.pub_date.date().strftime("%d-%m-%Y")}_\n'
                f'*–ò–º—è:* {item.buyer_name},\n'
                + f'*–¢–µ–ª:* {item.phone_number},\n\n'
                + f'*–û–±—ä–µ–∫—Ç –ø–æ–∏—Å–∫–∞:* {Output.search_category_output(item.category)},\n'
                + f'*–û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞:* {item.microregion},\n\n'
                + f'*–î–µ–Ω–µ–∂–Ω—ã–π –ª–∏–º–∏—Ç:* {item.limit} ‚ÇΩ,\n'
                + f'*–î–µ–Ω–µ–∂–Ω—ã–π —Ä–µ—Å—É—Ä—Å:* {item.source},\n\n'
                + f'*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {item.comment}',
                disable_notification=True,
                parse_mode='Markdown'
            )
    else:
        await message.answer(
            '‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ'
        )
# -----------------------------------------------------------------------------
# -------------------–û–ë–™–ï–ö–¢–´ –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê---------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['obj4mybuyer'])
async def obj_for_my_buyer(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        queryset = BuyerDB.objects.filter(user_id=user_id)
        if queryset.exists():
            await message.answer(
                '‚úè –í—ã–±–µ—Ä–∏ –ø–æ–∫—É–ø–∞—Ç–µ—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—ä–µ–∫—Ç—ã',
                reply_markup=keyboards.buyer_list_keyboard(searching_user_id=user_id)
            )
            await ObjForBuyer.step2.set()
        else:
            await message.answer(
                '‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ'
            )


@dp.callback_query_handler(state=ObjForBuyer.step2)
async def searching_for_buyer(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        id = callback.data
        buyer = BuyerDB.objects.filter(pk=id)
        buyer_category = await buyer.values('category').aget()
        buyer_limit = await buyer.values('limit').aget()

        class_name = Output.str_to_class(buyer_category.get('category').title())
        if class_name == Apartment:
            queryset = class_name.objects.filter(
                price__lte=(buyer_limit.get('limit')),
                room_quantity=buyer_category.get('category')
            )
        else:
            queryset = class_name.objects.filter(price__lte=(buyer_limit.get('limit')))

        if queryset.exists():
            await callback.message.edit_text('üîé –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ–¥–æ–π–¥—É—Ç —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:')

            if class_name == House:
                for item in queryset:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.house_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await callback.message.answer_media_group(media=album)

            elif class_name == TownHouse:
                for item in queryset:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.townhouse_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await callback.message.answer_media_group(media=album)

            elif class_name == Land:
                for item in queryset:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.lands_search_result_text(
                                    item=item
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await callback.message.answer_media_group(media=album)

            elif class_name == Apartment:
                for item in queryset:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.apartments_search_result_text(
                                        room_count=int(buyer_category.get('category')),
                                        item=item
                                    ),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await callback.message.answer_media_group(media=album)

            else:
                for item in queryset:
                    await asyncio.sleep(0.5)
                    album = MediaGroup()
                    photo_list = item.photo_id
                    for photo_id in photo_list:
                        if photo_id == photo_list[-1]:
                            album.attach_photo(
                                photo_id,
                                caption=message_texts.room_search_result_text(item=item),
                                parse_mode='Markdown'
                            )
                        else:
                            album.attach_photo(photo_id)
                    await callback.message.answer_media_group(media=album)
        else:
            await callback.message.edit_text(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –≤ –±–∞–∑–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞'
            )
        await state.finish()
# -----------------------------------------------------------------------------
# -------------------–ö–õ–ò–ï–ù–¢–´ –°–û–¢–†–£–î–ù–ò–ö–û–í---------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['mycompbuyers'])
async def my_company_buyers(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        if Ceo.objects.filter(user_id=user_id).exists():
            await message.answer(
                '–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
                reply_markup=keyboards.worker_list(user_id)
            )
            await WorkersBuyers.step2.set()
        else:
            await message.answer(
                '‚ùó –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –¢—ã –Ω–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞'
            )


@dp.callback_query_handler(state=WorkersBuyers.step2)
async def worker_buyers(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        queryset = BuyerDB.objects.filter(user_id=callback.data)
        rieltor = Rieltors.objects.get(user_id=callback.data)
        if queryset.exists():
            await callback.message.answer(
                f'–£ *{rieltor.name}* {queryset.count()} –ø–æ–∫—É–ø–∞—Ç–µ–ª—è(-–µ–π):',
                disable_notification=True,
                parse_mode='Markdown'
            )
            for item in queryset:
                await asyncio.sleep(0.5)
                await callback.message.answer(
                    f'‚ùá _–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: {item.pub_date.date().strftime("%d-%m-%Y")}_\n'
                    f'*–ò–º—è:* {item.buyer_name},\n'
                    + f'*–¢–µ–ª:* {item.phone_number},\n\n'
                    + f'*–û–±—ä–µ–∫—Ç –ø–æ–∏—Å–∫–∞:* {Output.search_category_output(item.category)},\n'
                    + f'*–û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞:* {item.microregion},\n\n'
                    + f'*–î–µ–Ω–µ–∂–Ω—ã–π –ª–∏–º–∏—Ç:* {item.limit} ‚ÇΩ,\n'
                    + f'*–î–µ–Ω–µ–∂–Ω—ã–π —Ä–µ—Å—É—Ä—Å:* {item.source},\n\n'
                    + f'*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {item.comment}',
                    disable_notification=True,
                    parse_mode='Markdown'
                )
            await state.finish()
        else:
            await callback.message.answer(
                f' –£ {rieltor.name} –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ'
            )
            await state.finish()
# -----------------------------------------------------------------------------
# -------------------–û–ë–™–ï–ö–¢–´ –°–û–¢–†–£–î–ù–ò–ö–û–í---------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['mycompobjects'])
async def my_company_obj(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        if Ceo.objects.filter(user_id=user_id).exists():
            await message.answer(
                '–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
                reply_markup=keyboards.worker_list(user_id)
            )
            await WorkersObjects.step2.set()
        else:
            await message.answer(
                '‚ùó –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –¢—ã –Ω–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞'
            )


@dp.callback_query_handler(state=WorkersObjects.step2)
async def worker_objects(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        rieltor = Rieltors.objects.get(user_id=callback.data)

        apartment_queryset = Apartment.objects.filter(user_id=rieltor.user_id)
        room_queryset = Room.objects.filter(user_id=rieltor.user_id)
        house_queryset = House.objects.filter(user_id=rieltor.user_id)
        townhouse_queryset = TownHouse.objects.filter(user_id=rieltor.user_id)
        land_queryset = Land.objects.filter(user_id=rieltor.user_id)

        apartment_count = apartment_queryset.count()
        room_count = room_queryset.count()
        house_count = house_queryset.count()
        townhouse_count = townhouse_queryset.count()
        land_count = land_queryset.count()

        total_count = apartment_count + room_count + house_count + townhouse_count + land_count

        data = {
            'total_count': total_count,
            'apartment_count': apartment_count,
            'room_count': room_count,
            'house_count': house_count,
            'townhouse_count': townhouse_count,
            'land_count': land_count,
        }

        await callback.message.answer(
            message_texts.rieltors_objects_text(data, rieltor.name),
            disable_notification=True,
            parse_mode='Markdown'
        )
        for item in apartment_queryset:
            await asyncio.sleep(0.5)
            await callback.message.answer(
                f'‚ú≥ *{item.room_quantity} –∫.–∫–≤.* '
                + f'{item.street_name} –¥.{item.number_of_house}, '
                + f'{item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*\n'
                # —Ç—É—Ç –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º –∏ –∏–º–µ–Ω–∞–º
                + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                disable_notification=True,
                parse_mode='Markdown'
            )

        for item in room_queryset:
            await asyncio.sleep(0.5)
            await callback.message.answer(
                f'‚ú≥ *–ö–æ–º–Ω–∞—Ç–∞* {item.street_name} '
                + f'–¥.{item.number_of_house}, {item.floor} —ç—Ç–∞–∂ - *{int(item.price)} ‚ÇΩ*\n'
                + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                disable_notification=True,
                parse_mode='Markdown'
            )

        for item in house_queryset:
            await asyncio.sleep(0.5)
            await callback.message.answer(
                f'‚ú≥ *–î–æ–º* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
                + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                disable_notification=True,
                parse_mode='Markdown'
            )

        for item in townhouse_queryset:
            await asyncio.sleep(0.5)
            await callback.message.answer(
                f'‚ú≥ *–¢–∞—É–Ω—Ö–∞—É—Å* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
                + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                disable_notification=True,
                parse_mode='Markdown'
            )

        for item in land_queryset:
            await asyncio.sleep(0.5)
            await callback.message.answer(
                f'‚ú≥ *–£—á–∞—Å—Ç–æ–∫* {item.microregion}, {item.street_name} - *{int(item.price)} ‚ÇΩ*\n'
                + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                disable_notification=True,
                parse_mode='Markdown'
            )
        await state.finish()
# -----------------------------------------------------------------------------
# -------------------–ê–†–•–ò–í---------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['archive'])
async def archive(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        if Ceo.objects.filter(user_id=user_id).exists():
            await message.answer(
                '–í—ã–±–µ—Ä–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
                reply_markup=keyboards.worker_list(user_id)
            )
            await ArchiveObjects.step2.set()
        else:
            await message.answer(
                '‚ùó –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –¢—ã –Ω–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞'
            )


@dp.callback_query_handler(state=ArchiveObjects.step2)
async def arcjive_objects(
    callback: CallbackQuery, state: FSMContext
):
    if callback.data == '–û—Ç–º–µ–Ω–∞':
        await callback.message.edit_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        )
        await state.finish()
    else:
        rieltor = Rieltors.objects.get(user_id=callback.data)

        archive_qeryset = Archive.objects.filter(user_id=callback.data)
        if archive_qeryset.exists():
            await callback.message.answer(
                f'–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Ä–∏–µ–ª—Ç–æ—Ä–æ–º *{rieltor.name}*:',
                disable_notification=True,
                parse_mode='Markdown'
            )
            for item in archive_qeryset:
                await asyncio.sleep(0.5)
                await callback.message.answer(
                    f'*–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}*\n'
                    + f'*–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã:* {item.street_name} –¥.{item.object_number},\n'
                    + f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {item.owner_name}, —Ç.{item.owner_phone_number}',
                    disable_notification=True,
                    parse_mode='Markdown'
                )
        else:
            await callback.message.edit_text(
                f'‚ùó –£ —Ä–∏–µ–ª—Ç–æ—Ä–∞ {rieltor.name} –Ω–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤'
            )
        await state.finish()
# -----------------------------------------------------------------------------
# --------------------–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è---------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['ceoregistration'])
async def ceo_registration(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        if Ceo.objects.filter(user_id=message.from_user.id).exists():
            await message.answer(
                '‚ùó –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
            )
        else:
            await message.answer(
                ' ‚úè *–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ* –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø" –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n'
                + '–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—ã–¥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n'
                + '–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞, '
                + '–Ω–∞–ø–∏—à–∏—Ç–µ @davletelvir.\n\n',
                parse_mode='Markdown'
            )
            await CeoRegistration.step2.set()


@dp.message_handler(state=CeoRegistration.step2)
async def ceo_reg_step2(message: Message, state: FSMContext):
    if message.text == '–°—Ç–æ–ø' or message.text == '—Å—Ç–æ–ø':
        await message.answer(
                '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
            )
        await state.finish()
    else:
        code_word = CodeWord.objects.filter(code_words=message.text)

        if code_word.exists():
            code_word.delete()

            rieltor = Rieltors.objects.get(user_id=message.from_user.id) # —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            rieltors = Rieltors.objects.filter(agency_name=rieltor.agency_name).exclude(user_id=message.from_user.id)

            cond_ceo = False
            cond_workers = False

            if DB_Worker.ceo_create(rieltor):
                cond_ceo = True

            if rieltors.exists():
                rieltors_list = []
                for item in rieltors:
                    if item.user_id != rieltor.user_id:
                        rieltors_list.append(item.name)
                rieltors_string = ', '.join(rieltors_list)
                if DB_Worker.workers_create(ceo_id=rieltor.user_id, rieltors=rieltors.exclude(user_id=rieltor.user_id)):
                    cond_workers = True

            if cond_ceo and cond_workers:
                await message.answer(
                    '–û–ö. –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å!'
                    + ' –ü—Ä–∏–≥–ª–∞—à–∞–π —Å–≤–æ–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n\n'
                    + f'–¢—ã —É–∂–µ –º–æ–∂–µ—à—å –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ {rieltors_string}'
                )
            elif cond_ceo and not cond_workers:
                await message.answer(
                    '–û–ö. –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å!'
                    + ' –ü—Ä–∏–≥–ª–∞—à–∞–π —Å–≤–æ–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!'
                )
            else:
                await message.answer(
                    '‚ùé –û—à–∏–±–∫–∞! –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @davletelvir'
                )
            await state.finish()
        else:
            await message.answer(
                '‚ùé –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ —Å–ª–æ–≤–æ!\n\n'
                + '–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–°—Ç–æ–ø" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            )
            await CeoRegistration.step2.set()
# -----------------------------------------------------------------------------
# --------------------–ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏-------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['mycoworkers'])
async def my_coworkers(message: Message):
    if not Rieltors.objects.filter(user_id=message.from_user.id):
        await message.answer(
            '‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /registration'
        )
    else:
        DB_Worker.command_counting()
        user_id = message.from_user.id
        if Ceo.objects.filter(user_id=user_id).exists():
            ceo = Ceo.objects.get(user_id=user_id)
            rieltors = Rieltors.objects.filter(agency_name=ceo.agency_name).exclude(user_id=user_id)
            if rieltors.exists():
                for item in rieltors:
                    await message.answer(
                        text=f'–£ –≤–∞—Å *{rieltors.count()}* —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (-–∞, -–æ–≤) –≤ —Å–∏—Å—Ç–µ–º–µ:',
                        parse_mode='Markdown'
                    )
                    await message.answer(
                        text=f'username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: *@{item.username}*,\n'
                             + f'–∏–º—è: *{item.name}*,\n'
                             + f'–Ω–æ–º–µ—Ä: *{item.phone_number}*',
                        parse_mode='Markdown'
                    )
            else:
                await message.answer(
                    '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ'
                )
        else:
            await message.answer(
                '‚ùó –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –¢—ã –Ω–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞'
            )
# -----------------------------------------------------------------------------
# --------------------–∞–≥–∏–¥–µ–ª—å--------------------------------------------------
# -----------------------------------------------------------------------------


@dp.message_handler(commands=['aqidel'])
async def history_is_lie(message: Message):
    await message.answer(
        message_texts.aqidel()
    )


@dp.message_handler(commands=['speech'])
async def speech(message: Message):
    for item in message_texts.speech():
        await message.answer(
            item
        )
